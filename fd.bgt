double gversion=1.0;
const string ver="1.0";
//#include"sounds.dat"
#include"includes.bgt"
lancha lan;
string mapainicial="map:começo\r\nmaxx:51\r\nmaxy:10\r\nplatform:0:50:0:carpet\r\nwall:0:0:100:wallgeneric\r\nwall:51:0:100:wallgeneric\r\nzone:0:50:0:100:Carregando jogo...\r\nsafezone:0:100:0:100";
string bonus="map:barco
maxx:17
maxy:10
desativar:camera
desativar:coordenadas
desativar:varinha
platform:1:16:0:none
wall:0:0:10:wallnone
wall:17:0:10:wallnone
zone:1:16:0:10:.
safezone:1:16:0:10
sound_source:0:17:-10:-10:barcomovendo.ogg
sound_source:0:17:-2:-2:oceano1.ogg
sound_source:0:17:-10:-10:oceano3.ogg
sound_source:0:17:0:0:oceano4.ogg";
string[] gladiadores, weapons(39), sons, itenssecundarios;
string bell=ascii_to_character(7);
string bell2=ascii_to_character(9);
int f1, f2, f3, f4, f5, f6, f7, f8, f9, f0, paraquedas=0, mdor=1, olhar_x, olhar_y, nvaicair=0, avisanivel=1, studo=0, abarco=0, velo2=100, dveloz=0, modogalil=0, rcontrol=0, pak48=0, nandar=-1;
int modoak48=0;
uint invsecundario=0;
bool brancas=true, outras=true, portable=false, ausente=false;
int mouseativo=1, ouviremoutrasjanelas=1, ouvirpassos=1, dcoordenadas=0, dcamera=0, bicicleta=0, bicicletaativa=1, dvarinha=0;
int rak47=0, rar15=0;
joystick j;
int defjoy=0;
string defjoyname=j.name, nolhar;
string nomejogo="Fighting to the death";
string idiomachat="pt";
string idiomaorigem="es";
string cmfinal;
int ouvirleilao=1, atu=0;
int desenvolvedordm=0;
int primeiravez=0;
int numero_dispositivo;
int avisadesconectou=0;
int usalogo=0;
double volumejogo=0, musicamenu=30, bicicletaveloc=400;
sound somafogando, carregandotaser, chuvatelhado, chuvalivre, somguardachuva, cavar, updatefound, updatedone, updatemus;
int atualizar=0;
string opa;
int vulcanativa=0;
int guardachuva=0;
int cavando=0, ouvirhits=1, tradutorativo=0;
int numerochuva;
string bebendo;
bool bolhadear=false, autologar=false, mudo=false, centado=false;
int novato=1;
bool echeck;
int ouvirmortes=1;
double walktime=250;
double walkvelocidade=200;
double defwalkvelocidade=250;
double runvelocidade=140;
double defrunvelocidade=220;
double jumpvelocidade=100;
int naoevoce=1;
int afogando=0;
int congelando=0;
int numerocongelando=60000;
int grama=0;
int salvavida=0;
int conexao=20000;
int chuvaativa=0;
int ak48_carregada=0;
int ak48t=150, ak48t2=54, mk1t=120;
int mk1_carregada=0;
int mp7_carregada=0;
int carregar30=1000;
int carregartime;
int carregando;
int atirando;
int modom4a1=0;
int modouzi=0;
int modom249=0;
int modobenelli=0;
int modoarco=0;
int modoarcodist=80;
int modoarcodano=60;
int modoarcotime=1000;
int carregarmodoarco=2000;
int carregar1=700;
int carregar2=500;
int carregar3=2000;
int carregar4=2000;
int carregar5=2000;
int carregar6=2000;
int carregar7=2000;
int carregar8=1500;
int carregar9=1500;
int carregar10=2100;
int carregar11=2500;
int carregar12=700;
int carregar13=1500;
int carregar14=600;
int carregar15=2000;
int carregar16=1600;
int carregar17=1600;
int carregar18=1600;
int carregar19=1600;
int carregar20=1600;
int carregar21=1600;
int carregar22=600;
int carregar23=3989;
int carregar24=728;
int carregar25=928;
int carregar26=900;
int carregar33=1000;
int m249_carregada, sub_laser_carregada, m4a1_carregada, benelli_carregada, mp5_carregada, remington_carregada, doze_carregada, vulcan_carregada, ar15_carregada, m60_carregada, glock_carregada, desert_carregada, sniper_carregada, ak47_carregada, granada_carregada, uzi_carregada, bazuca_carregada=0, m240_carregada, arco_carregado, ultralaser_carregada, m14_carregada, shotgun_carregada, rifle_carregado=0, arco_carregado2=0, dardo_carregado, dardo_carregado2;
int molotovtime=560, 	extintortime=900;
int mp7time=130;
int knifetime=400;
int tdardo=400;
int socotime=350;
int shotguntime=1000;
int uzitime=85;
int glocktime=300;
int snipertime=240;
int grenadetime=1500;
int eagletime=300;
int firestartime=100;
int crossbowtime=1000;
int miniguntime=310;
int rocketlaunchertime=1000;
int rpgtime=1000;
int gastime=400;
int modobenellitime=550;
int lasertime=550;
int missiltime=500;
int mp5time=90;
int ar15time=84;
int ar15time2=300;
int m60time=450;
int espadatime=570;
int espada_curtatime=540;
int lancatime=517;
int remingtontime=530;
int dozetime=340;
int vulcantime=850;
int m4a1time=100;
int m249time=97;
int ak47time=80;
int ak47time2=320;
int sub_lasertime=70;
int tasertime=5000;
uint tirostaser=0, clicado=0, falhou=0;
int carregar27=30000;
int modoatirar;
int mousey, mousex, mousez;
timer mousemenutimer, joymenutimer, tmouse, tvolume, tempocongelando, modoatirartempo, ativotimer, carregartimer, tenter, tverificar, tpingar, tbonus, tbonus2;
string mainlang;
bool demo=false;
string latest, description, vernova;
bool echo;
int echotime=80;
timer echotimer;
bool dcheck;
int fallheight;
bool creating;
key_hold kleft(KEY_LEFT,300,80);
key_hold kright(KEY_RIGHT,300,80);
key_hold kup(KEY_UP,300,80);
key_hold kdown(KEY_DOWN,300,80);
int invcatpos;
string[] invcat, idiomaschat;
const uint pingchannel=0;
const uint msoundchannel=13;
tts_voice ws;
string[] wslist;
int wsindex=0;
int wsv=0;
//const string serveraddress="localhost;
const string serveraddress="localhost";
const int serverport=2007;
string lasttile;
string lastzone;
bool airchange;
bool tilechange;
int tempweap=0, tempweap2=0;
int vmode=1;
int falarteclas=0;
int asktoexit=0;
int droptime=30;
library dll;
instance dmortal;
string banned;
int voice=1;
int minping=-1;
int maxping=0;
int cursor;
int failedpings, totalfailedpings;
int pings;
int lastping;
int comidatime=1000000;
bool term;
int termtime=300;
int exittime=600;
bool exiting;
bool ping;
int pingtime=5000;
int pingtime2=10000;
int defpingtime=10000;
int def2pingtime=5000;
int mdardo=0;
int galil_carregada=0;
int carregar34=90;
int galiltime=80;
int m16_carregada=0;
int carregar32=1000;
int m16dano=400;
int m16dist=110;
int m16time=230;
string inv, apartamentoinv, opcoespc;
int interrupt=1;
int wineask;
int staircasetime=140;
int defstaircasetime=140;
bool falling;
int fallvelocidade=120;
int deffallvelocidade=120;
double airtime=200;
double defairtime=40;
double airvelocidade=40;
bool atapex;
int jumptime=100;
int apextime=60;
int jumptime2=90;
bool ascending;
int jumpheight=5;
int ty1, ty2;
bool connect;
bool onwall;
int weapon=0;
int weapondist;
int weapondano;
double weapontime;
int defbvelocidade=20;
string playertrack;
string godir, godir2;
int ttsrate=0;
int looptime=100;
int beaconing;
bool looping;
int go, go2;
string currentloc;
int zonestatus=1;
string mapname;
int jumping, pulou=0;
string un, pw;
file pf;
string prefsdir=DIRECTORY_APPDATA+"\\DBproduction\\FTTD";
vector me(1, 0), tracker(-1,-1),camera,max;
sound_pool p;
sound_pool p2;
sound_pool pobjs;
sound_pool pcomputador;
int facing=Right;
timer droptimer, termtimer, exittimer, pingtimer, falltimer, weapontimer, looptimer, jumptimer, walktimer, canijumptimer;
jogopoker poker;
jogoroletadasorte roleta_animais;
jogofarkle farkle;
jogoblackjack blackjack;
jogoparouimpar parouimpar;
dadodasorte dadosorte;
downloader dl;
googletranslateclient gtc;
parsed_data pu;
virtualizer v;
telefone tel;
string username;
bool connected=false;
sound@ bleepy;
tone_synth bleeper;
bool forcepinging=false;
bool star=false;
bool moveable=true;
bool floating=false;
bool cloaked=false;
sound gamemus;
void main(){
set_sound_storage("sounds.dat");
set_sound_decryption_key("todo1204melhor3q5mais2", false);
abrir();
p.max_distance=30;
bool achou=false;
string pasta="C:/Program Files";
if(directory_exists(pasta+" (x86)"))pasta+=" (x86)";
string[] z=find_directories(pasta+"/*");
for(uint i=0;i<z.length();i++){
if(string_contains(string_to_lower_case(z[i]), "cheat", 1)>-1||string_contains(string_to_lower_case(z[i]), "engine", 1)>-1)achou=true;
}
if(directory_exists(DIRECTORY_TEMP+"\\Cheat Engine")){
achou=true;
}
if(dmortal.is_already_running||achou==true){
sair();
}
sons.insert_last("body1.ogg:1");
sons.insert_last("body2.ogg:2");
sons.insert_last("body3.ogg:3");
sons.insert_last("body4.ogg:4");
sons.insert_last("body5.ogg:5");
sons.insert_last("body6.ogg:6");
sons.insert_last("body7.ogg:7");
sons.insert_last("bodyfive.ogg:8");
sons.insert_last("bodythree.ogg:9");
sons.insert_last("rico1.ogg:10");
sons.insert_last("rico2.ogg:11");
sons.insert_last("rico3.ogg:12");
sons.insert_last("rico4.ogg:13");
sons.insert_last("rico4.ogg:14");
sons.insert_last("rico5.ogg:15");
sons.insert_last("rico6.ogg:16");
sons.insert_last("ricofive.ogg:16");
sons.insert_last("ricothree.ogg:17");
sons.insert_last("boobytrapplace.ogg:18");
sons.insert_last("m60rico.ogg:19");
sons.insert_last("mp5rico.ogg:20");
sons.insert_last("mp5hit.ogg:21");
sons.insert_last("remingtonrico.ogg:22");
sons.insert_last("sniperrico.ogg:23");
sons.insert_last("beacon.ogg:24");
sons.insert_last("beacon2.ogg:25");
sons.insert_last("bid.ogg:26");
sons.insert_last("cavaloloop.ogg:27");
sons.insert_last("chat.ogg:28");
sons.insert_last("chatmap.ogg:29");
sons.insert_last("item.ogg:30");
sons.insert_last("jump.ogg:31");
sons.insert_last("notifykills.ogg:32");
sons.insert_last("faca1.ogg:33");
sons.insert_last("faca2.ogg:34");
sons.insert_last("faca3.ogg:35");
sons.insert_last("arcohit1.ogg:36");
sons.insert_last("arcohit2.ogg:37");
sons.insert_last("arcohit3.ogg:38");
sons.insert_last("grenadehit.ogg:39");
sons.insert_last("laserhit.ogg:40");
sons.insert_last("bazucahit.ogg:41");
sons.insert_last("rocketexplode.ogg:42");
sons.insert_last("espadahit.ogg:43");
sons.insert_last("vulcanhit.ogg:44");
sons.insert_last("kick1.ogg:45");
sons.insert_last("kick2.ogg:46");
sons.insert_last("kick3.ogg:47");
sons.insert_last("kick4.ogg:48");
sons.insert_last("lançahit.ogg:49");
sons.insert_last("espada_curtahit.ogg:50");
sons.insert_last("sub_laserhit.ogg:51");
sons.insert_last("molotovatinge.ogg:52");
sons.insert_last("soco1.ogg:53");
sons.insert_last("soco2.ogg:54");
sons.insert_last("soco3.ogg:55");
sons.insert_last("soco4.ogg:56");
sons.insert_last("soco6.ogg:57");
sons.insert_last("soco7.ogg:58");
sons.insert_last("balaacerta.ogg:59");
gladiadores.insert_last("Wuula:0:200:30000:Wuula é um homem negro de cerca de 1,70 metros, natural da Numídia, norte da África.  Seu físico é leve porém vigoroso, e sua compleição física remete a um lutador de grande agilidade.  Possui uma grande cicatriz oblíqua em seu torso, provavelmente resultante de um confronto com um dos lutadores vencidos de sua lista.  Wuula, quando livre, era um caçador.  Hoje, é um gladiador iniciado na arte do combate de retiarius, que usa o tridente e a rede de captura.  Este gladiador, foi capturado pela legião romana em uma mina de sal no norte da África e trazido aqui para ser escravo.  Entretanto, Caius Felix, lanista de Julius Cesar, viu em seu porte físico uma boa possibilidade para a luta no circo e o comprou para os espetáculos.  Wulla foi então reinado pelos melhores retiarius da escola de Caius Felix e hoje é um respeitado retiarius.:Soldado");
gladiadores.insert_last("Wazax:0:200:60000:Wazax é o que se pode chamar de um típico espólio de guerra.  Na conquista da Grécia pelo Império Romano, muitas crianças foram capturadas e feitos de escravos para o deleite dos nobres romanos.  Com Wazax, não foi diferente. Na conquista de Tróia, Wazax foi capturado e levado a Roma para virar escravo. Entretando sua habilidade com lanças, trazida da educação troiana, mostrou-se útil ao manejar um pillum de um legionário para se defender do feitor, o que lhe custou uma bela surra e a admiração de Lucius Proximus, um renomado lanista de Roma.  Desde então, foi criado para ser um gladiador hoplomachus, disciplina que consiste na arte do combate com lança.  Por mais glórias que Wazax tenha na arena, ele não esconde sua origem escrava. Suas costas e suas pernas são repletas de marcas de chicote.  Seu apelido é \"Tigre\", por causa das marcas de chicote, que se parecem com as listras do animal.:Soldado");
gladiadores.insert_last("Cairis:201:1000:90000:Cairis é um gaulês típico. Ruivo, cabelos longos, bigode espesso e uma barba comprida arrumada em três tranças.  E um belo porte físico, ainda que distribuídos em pouco mais de 1,60m, o que faz dele o mais baixo de todos os gladiadores.  Mas não se engane; cairis é muito forte.  Para ser capturado, quase devastou uma decúria sozinho!  Cairis foi capturado a mando de Marcus Grachus, ex-general da campanha da Gália, hoje lanista de Roma.  Grachus, durante uma escaramuça viu o brilho deste guerreiro e decidiu captura-lo para dar de presente à Cesar, como prêmio da campanha na Galia.  Cesar então mandou Grachus treinar o gaulês para o circo.  E hoje Cairis ganha sua vida nos combates no coliseu.:Mercenário");
gladiadores.insert_last("Claudius:201:1000:120000:Claudius sempre esteve desde cedo ligado ao circo.  De família muito pobre, começou trabalhando na caserna do coliseu como limpador de estrebaria. Aprendeu o ofício da forja e logo se tornou o ferreiro do coliseu, responsável pela manutenção das bigas, das ferraduras dos cavalos e dos equipamentos usados pelos gladiadores.  Com o tempo, ocupou o ofício de carrasco, responsável por cortar a cabeça dos prisioneiros no coliseu, para o deleite da platéia.  Esta prática fez Claudius pegar gosto pela matança e logo se inscreveu em uma seletiva para formação de novos gladiadores.  Claudius realizou um verdadeiro massacre nesta seletiva e logicamente foi o vencedor.  Foi então arrebanhado por Caius Felix e tornou-se um conhecido gladiador.  Sua fama é de colecionar tampas de crânios de seus vencidos.:Mercenário");
gladiadores.insert_last("Lucius:1001:2000:150000:Lucius é um enorme gladiador proveniente da região da Trácia, ao norte da Grécia, região famosa pela maldade de seus guerreiros.  Lucius não é diferente. Foi recrutado cedo nas hordas de bárbaros trácios fazendo pilhagens frequentes nas províncias romanas da região do norte da Grécia, quando acabou capturado. O centurião de um dos campos fortificados viu que Lucius não passava de um menino de pouco mais de 13 anos.  Porém, tinha quase a altura e o porte físico de um legionário regular da legião.  Decidiu dar tratamento especial a este prisioneiro e a treina-lo para as arenas locais.  Lucius foi tão bem nas arenas que mais tarde foi comprado a peso de ouro por Gaius, um famoso lanista de Roma. Desde então, é um dos campeões da arena romana, conhecido e renomado por sua crueldade e por sua resistência a ferimentos.:Presidente");
gladiadores.insert_last("Sirix:1001:2000:180000:Cirix é um gladiador de origem bárbara, oriental, provavelmente huno.  Tanto como incerta é sua origem, incerta é também sua trajetória até ter se tornado gladiador.  Mas sabe-se que é o mais cruel e sádico gladiador de todos os do Coliseu.  Seu prazer é desarmar seu inimigo, para ir imolando-o aos poucos, extasiando-se de cada jorro de sangue.  Ele consegue lutar desta forma sádica graças a sua enorme e conhecida agilidade, capaz de lhe proporcionar um método de luta quase acrobático.  Cirix tem outra particularidade.  Ele luta sem armadura pesada, expondo seu corpo, repleto de tatuagens tribais.:Presidente");
gladiadores.insert_last("Cressus:2001:3000:210000:Cressus vem de uma família de tradição romana na caserna.  Filho de gladiador, Cressus aprendeu desde muito cedo o dia-a-dia na caserna.  Era o escudeiro de seu pai, inclusive viu-o sendo morto na arena.  Sua ira fôra tão grande que pegou a espada da mão ainda quente de seu pai e picou seu algoz de forma muito feroz.  Isso foi o suficiente para ele ser aclamado como \"a sensação\" dos jogos daquele ano.  Desde então, Cressus vem dedicando sua vida a matar todos e qualquer guerreiro que cruzar seu caminho.:Ditador");
gladiadores.insert_last("Duron:2001:3000:240000:Duron é um gladiador esbelto e de aparência bem ágil.  Foi treinado por seu irmão Argon, que o tinha em alta estima, antes de sua morte, durante as revoltas para libertação dos escravos, liderado por Spartacus.  Sua agilidade e sua força, aliada à sua inteligência na peleja fazem de Duron um terrível adversário.:Ditador");
gladiadores.insert_last("Aiellus:3001:4000:270000:Aiellus fôra um dia um legionário romano.  Entretanto, sua crueldade e indisciplina militar fizeram com que ele fosse expulso da legião.  Virou desta forma um desertor, hostilizado em todo o mundo romano.  Entretanto, viu no Coliseu a oportunidade de ter o salvo-conduto em todo mundo romano, além de ser remunerado e bem tratado fazendo o que mais gostava de fazer.  Desde sua entrada na caserna do coliseu, sua vida mudou para melhor.  Adquiriu fama, dinheiro, reputação.  E em troca disto, perdeu apenas um olho em uma de suas lutas. Aiellus é facilmente reconhecido por usar um tapa-olho de pano negro feito a partir de uma bandana de seda jogado por alguma mulher da nobreza.:Assassino");
gladiadores.insert_last("Quintos:3001:4000:300000:Quintus é um homem rude e cruel.  Sua enorme estatura e compleição física tornam este gladiador uma figura realmente apavorante.  Conhecido por uma grande cicatriz de luta, que começa em sua testa e termina perto do queixo, Quintus, o \"cara-partida\", como é conhecido por seus companheiros de caserna é muito respeitado. Para os companheiros, um apelido de brincadeira.  Para seus oponentes, a alcunha de \"Destruidor\" é bem mais indicada.:Assassino");
gladiadores.insert_last("Marcus:4001:5000:330000:Marcus é um gladiador provindo da região da Germânia.  Veio como escravo como troféu de batalha a Julio Cesar, que pensou inicialmente em joga-lo aos leões.  Entretanto, Caius Felix viu em seu físico um amplo potencial para a luta no Circus.  Caius então pediu autorização ao Imperador para treina-lo na Ludus, e César o apoiou.  Marcus então participou de intensos treinamentos e ia pegando o gosto pelo sangue espirrando.  Hoje Marcus é um enorme gladiador de cabelos compridos e louros, do mesmo tom de sua grande barba.  Possui uma cicatriz que lhe corta obliquamente o torso e uma outra cicatriz em sua cabeça, evidenciada por uma grande falha no couro cabeludo.:Desenvolvedor de guerra");
gladiadores.insert_last("Barca:4001:5000:350000:Após os romanos derrotarem os cártagos, os sobreviventes foram obrigados a lutarem entre si na arena.  Barca foi o último sobrevivente.  Sua última luta foi contra Mago, o chefe de seu povo.  Ele era seu pai.  Barca é hoje um gladiador sem nenhum sentimento, sem senso de laços.  Sua única ocupação é matar oponentes para não pensar no semblante agonizante de seu pai.:Desenvolvedor de guerra");
gladiadores.insert_last("Theokoles:5001:6000:400000:Theokoles, \"a sombra da morte\", era um gladiador gigante.  Tinha mais de 3 metros de altura.  Certa vez, lutou contra 100 homens.  Matou a todos.  Antes de se aposentar enfrentou um último adversário que o derrotou.  O nome desse adversário, Doctore.:Chefe da guerra");
gladiadores.insert_last("Crixus:6001:7000:500000:Crixus é o melhor gladiador do ludus de Batiatus, o Campeão de Cápua. Arrogante e poderoso, ele tem uma profunda antipatia por Spartacus, cujo surgimento ameaça perturbar seu reinado no ludus.  Crixus segue seu caminho à espera de oponentes, enquanto defende o seu lugar no topo da hierarquia dos gladiadores.:Comandante");
gladiadores.insert_last("Tetraites:7001:8000:600000:Tetraites foi originalmente descoberto por meio de pichações encontradas em Pompéia, em 1817, que ilustravam sua corajosa vitória sobre Prudes. Lutando no estilo mirmilão, ele usava uma espada curta, um grande escudo retangular, um capacete, protetores de braço e caneleiras. A extensão da fama de Tetraites só foi totalmente compreendida no final do século XX, quando foram encontradas cerâmicas em lugares tão distantes como a França e a Inglaterra, com ilustrações das vitórias do gladiador.:Comandante");
gladiadores.insert_last("Prisco:7001:8000:650000:A batalha entre Prisco e Verus no primeiro século d.C. foi o primeiro combate de gladiadores no famoso Anfiteatro Flaviano, o Coliseu de Roma. Depois de uma vigorosa batalha que se arrastou por horas, os dois gladiadores se renderam um ao outro ao mesmo tempo, baixando suas espadas em respeito mútuo. A multidão, extasiada pela luta,  gritou em aprovação, e o Imperador Tito premiou a ambos com as rudis, uma pequena espada de madeira dada aos gladiadores no momento de sua aposentadoria. Priscus e Verus deixaram a arena como homens livres.:Presidiário da desgraça");
gladiadores.insert_last("Spiculus:10000:12000:700000:Spiculus teve uma especial relação de proximidade com o imperador Nero. Após inúmeras vitórias de Spiculus, Nero concedeu-lhe palácios, escravos e riquezas além da imaginação. Quando Nero foi deposto em 68 d.C., ele pediu a seus assessores para encontrar Spiculus, porque desejava morrer nas mãos do famoso gladiador. Mas Spiculus não pôde ser encontrado, então, Nero foi forçado a tirar a própria vida.:Louco não confiável");
gladiadores.insert_last("Marco Atílio:10000:12000:750000:Apesar de ser um cidadão romano de nascimento, Atílio escolheu entrar na escola de gladiadores para tentar liquidar as pesadas dívidas contraídas durante a sua vida. Na primeira batalha ele derrotou Hilarus, um gladiador pertencente a Nero, que já havia vencido treze vezes seguidas. Em outro combate, Atílio derrotou Raecius Felix, que ganhara doze batalhas seguidas. Os feitos de Atílio foram narrados em mosaicos e pichações descobertas em 2007.:Louco não confiável");
gladiadores.insert_last("Carpoforo:12001:16000:850000:Enquanto os outros gladiadores nesta lista são conhecidos por seus combates corpo-a-corpo contra outros seres humanos, Carpoforo era um famoso bestiarri Esses gladiadores lutavam exclusivamente contra animais selvagens, e, sendo assim,  tinham carreiras muito curtas. Lutando no início do Anfiteatro Flaviano, Carpoforo ficou famoso por  derrotar um urso, um leão e um leopardo na mesma batalha. Em outro combate naquele dia, ele matou um rinoceronte com uma lança. No total, diz-se que ele matou vinte animais selvagens em um único dia, levando os fãs e os companheiros de arena a comparar Carpoforo com o mitológico Hércules.:Zumbi");
gladiadores.insert_last("Flamma:12001:16000:900000:Flamma, um escravo sírio, morreu com a idade de trinta anos, depois de ter lutado trinta e quatro vezes e ter ganho vinte e um desses combates. Nove batalhas terminaram empatadas, sendo ele derrotado apenas quatro vezes. O mais admirável é que Flamma foi premiado com a rudis quatro vezes. Quando a rudis era dada a um gladiador, ele era libertado e podia viver normalmente entre os cidadãos romanos, contudo, Flamma recusou a liberdade, optando por continuar a lutar na arena.:Zumbi");
gladiadores.insert_last("Spartacus:16001:20000:950000:Lêntulo Batiato, de Cápua, deve ter reconhecido seu potencial, porque comprou Espártaco  com a intenção de transformá-lo em um gladiador. Mas a independência feroz de um guerreiro não é facilmente domada. Em 73 a.C., Espártaco convenceu setenta de seus companheiros gladiadores, entre eles Crisus, a rebelarem-se contra seu senhor. Na revolta, Batiato foi assassinado e os gladiadores fugiram para as costas do vizinho Monte Vesúvio. Traído, Spartacus é vendido para os romanos como escravo e comprado por uma escola de gladiadores. Mas o destino tinha planos maiores para o soldado trácio -  ele se tornaria o líder da maior revolução da Antiguidade e seu nome permaneceria para sempre gravado na história. Enquanto fugia, o grupo ia reunindo homens livres e também muitos outros escravos, tornando-se assim um grande e poderoso exército. Os gladiadores passaram o inverno de 72 a.C. a treinar os escravos recém-libertados, em preparação para o que hoje é conhecido como a Terceira Guerra Servil, com suas fileiras chegando a abrigar até 70 mil pessoas. Legiões inteiras foram enviadas para matar Espártaco, mas  foram facilmente derrotadas pelo espírito de luta e experiência dos gladiadores. Em 71 a.C., Marco Licínio Crasso juntou 50.000 soldados romanos bem treinados para perseguir e derrotar Espártaco. Crasso encurralou Espartacus no sul da Itália, derrotando suas forças, e matando o ex-escravo ( o corpo de Espártaco, contudo, nunca foi encontrado ). Seis mil seguidores de Espártaco foram capturados e crucificados ao longo da  Via Ápia, a estrada de Cápua a Roma.:Monstro");
if(string_contains(COMMAND_LINE, "portable", 1)>-1) portable=true;
if(!portable){
if (!directory_exists(DIRECTORY_APPDATA+"\\DBproduction")){
bool d=directory_create(prefsdir);
}
if(!directory_exists(prefsdir+"\\DM"))directory_create(prefsdir+"\\DM");
}
if(!portable)pf.open(prefsdir+"/DM5.0.dat","rb");
else pf.open("DM5.0.dat","rb");
readprefs();
pu.set_arquivo(cmfinal);
gtc.selecionar_url("http://www.desafiomortal.megadimensao.com.br/trans/t.php");
gtc.selecionar_linguagem_origem(idiomaorigem);
gtc.selecionar_linguagem_destino(idiomachat);
open_sound_device(numero_dispositivo);
set_sound_master_volume(volumejogo);
pf.close();
net.setup_client(4, 150);
idiomaschat.insert_last("Desativar chat=Desativado");
idiomaschat.insert_last("Arabic=ar");
idiomaschat.insert_last("English=en");
idiomaschat.insert_last("Español=es");
idiomaschat.insert_last("Français=fr");
idiomaschat.insert_last("Persian=pl");
idiomaschat.insert_last("Português=pt");
invcat.insert_last("Tudo");
invcat.insert_last("Armas");
invcat.insert_last("Munições");
invcat.insert_last("Explosivos");
invcat.insert_last("Roupas");
invcat.insert_last("Comidas e bebidas");
invcat.insert_last("Documentos");
invcat.insert_last("Preferências");
invcat.insert_last("Corpos");
banned=generate_computer_id("laranjabananagoiaba", true);
weapons[0]="soco";
weapons[1]="faca";
weapons[2]="espingarda";
weapons[3]="glock";
weapons[4]="desert_eagle";
weapons[5]="arco";
weapons[6]="m14";
weapons[7]="m240";
weapons[8]="granada";
weapons[9]="rifle.45";
weapons[10]="benelli";
weapons[11]="mega_laser";
weapons[12]="bazuca";
weapons[13]="lançador_de_granada";
weapons[14]="sniper";
weapons[15]="uzi";
weapons[16]="mp5";
weapons[17]="ar15";
weapons[18]="m60";
weapons[19]="espada";
weapons[20]="remington";
weapons[21]="doze";
weapons[22]="vulcan";
weapons[23]="m4a1";
weapons[24]="m249";
weapons[25]="ak47";
weapons[26]="taser";
weapons[27]="chute";
weapons[28]="lança";
weapons[29]="espada_curta";
weapons[30]="mp7";
weapons[31]="m16";
weapons[32]="sub_laser";
weapons[33]="molotov";
weapons[34]="extintor";
weapons[35]="galil";
weapons[36]="lançador_de_dardos";
weapons[37]="ak48";
weapons[38]="mk1";
create_add("tudo");
create_add("chats");
create_add("pm");
create_add("variado");
create_add("player");
create_add("leilão");
create_add("hits");
create_add("mortes");
create_add("conexões");
if(screen_reader_is_running(1)) install_keyhook();
tbonus.force(0);tbonus.pause();
show_game_window(nomejogo+" - "+pu.get_value("Versão")+" "+ver);
if(primeiravez==0){
primeiravez=1;
wait(500);
string a=idiomas();
if(a!=""){
cmfinal="lang/"+a;
pu.set_arquivo(cmfinal);
}
}
updatemus.stream("upmus.ogg");
updatefound.stream("up_found.ogg");
updatefound.volume=-15;
updatedone.stream("updated.ogg");
carregandotaser.stream("eletricidade.ogg");
chuvalivre.stream("telhado.ogg");
chuvalivre.volume=-100;
chuvalivre.stream("rain4.ogg");
chuvalivre.volume=-100;
mapname="";
wine_ask(wineask);
wineask=1;
ws.refresh_voice_list();
wslist=ws.get_voice_names();
wsindex=(wslist.length()-1);
writeprefs();
//if(!file_exists("sounds.dat")) exit();
if(string_contains(COMMAND_LINE, "reiniciar", 1)>-1) autologar=true;
if(autologar){
wait(1000);
logar();
}
if(usalogo==0) dlgplay("logo.ogg",true,25);
int q=question(pu.get_value("Precisamos de sua ajuda"), pu.get_value("A equipe do Fight to the death precisa de sua ajuda para o pagamento dos custos do servidor. Você pode fazer uma doação livre ou comprar itens em nossa loja. Você deseja colaborar com a gente?"));
if(q==1)run("C:\\windows\\explorer.exe", "http://www.dbproduction.net", false, false);
if(atualizar==1)batualizacao(true);
menuprincipal();
}
void netloop()
{
outrosloop();
event=net.request();
if(nvaicair==0){
if(net.get_peer_average_round_trip_time(peer_id)>=900&&connected&&temponaoevoce.elapsed>12000&&tpingar.elapsed>=1000){
tpingar.restart();
connect=false;
connected=false;
reset();
dlg(pu.get_value("O servidor decidiu que sua conexão não é segura por estar com um ping muito auto, e te desconectou."));
reiniciar();
}
}
if(event.type==event_disconnect&&event.peer_id==peer_id){
speak(pu.get_value("Conexão caiu."));
writeprefs();
wait(400);
reiniciar();
}
if(event.type==event_receive&&event.peer_id==peer_id){
//add_add_item("variado", pegar_mensagem());
failedpings=0;
totalfailedpings=0;
pingtime=defpingtime;
ping=false;
lastping=pingtimer.elapsed;
pings+=1;
if (lastping<minping or minping==-1)
minping=lastping;
if (lastping>maxping) maxping=lastping;
string[] parsed=string_split(pegar_mensagem(), " ", false);
}
if(event.type==event_receive and event.channel==0 and event.peer_id==peer_id)
{
string[] parsed=string_split(pegar_mensagem(), " ", false);
if(parsed[0]=="pong"){
failedpings=0;
totalfailedpings=0;
pingtime=defpingtime;
ping=false;
lastping=pingtimer.elapsed;
if(!forcepinging) pingtimer.restart();
pings+=1;
if (lastping<minping or minping==-1)
minping=lastping;
if (lastping>maxping)
maxping=lastping;
if(forcepinging)
{
forcepinging=false;
p.play_stationary("pingstop.ogg",false);
speak(pu.get_value("O ping levou")+" "+lastping+" ms.");
}
}
else if(parsed[0]=="remplayer"){
if(parsed[1]!=un)remplayer(parsed[1]);
}
else if(parsed[0]=="terminate"){
reset();
menuprincipal();
}
else if(parsed[0]=="dlancha"&&lan.nalancha==1)lan.sair();
else if(parsed[0]=="upl"&&parsed.length()>4)update_player(parsed[1], string_to_number(parsed[2]), string_to_number(parsed[3]), parsed[4]);
else if(parsed[0]=="p" and parsed.length()>=4) newplayer(parsed[1],string_to_number(parsed[2]),string_to_number(parsed[3]));
else if(parsed[0]=="pp"&&parsed.length()>2){
for(uint i=0;i<players.length();i++){
if(players[i].charname==parsed[1])players[i].pacifico=string_to_number(parsed[2]);
}
}
else if(parsed[0]=="playerbeep"&&parsed.length>2){
for(uint i=0; i<players.length; i++){
if(players[i].charname==parsed[1]) players[i].beeping=string_to_number(parsed[2]);
}
}
else if (parsed[0]=="update_player2") update_player2(parsed[1], string_to_number(parsed[2]), string_to_number(parsed[3]), parsed[4]);
else if(parsed[0]=="s"){
update_player(parsed[1], string_to_number(parsed[2]), string_to_number(parsed[3]), parsed[4]);
if (parsed[1]!=un and parsed[4]==mapname)
{
string ss=get_tile_at(string_to_number(parsed[2]),string_to_number(parsed[3]));
if(string_left(ss,4)!="wall") p2.play_2d(ss+"step"+random(1,5)+".ogg",me.x,me.y,string_to_number(parsed[2]),string_to_number(parsed[3]),false);
}
}
else if(parsed[0]=="sb"){
update_player(parsed[1], string_to_number(parsed[2]), string_to_number(parsed[3]), parsed[4]);
if (parsed[1]!=un&&parsed[4]==mapname){
string ss=get_tile_at(string_to_number(parsed[2]),string_to_number(parsed[3]));
ss=string_replace(ss, "0", "", true);
ss=string_replace(ss, "1", "", true);
ss=string_replace(ss, "2", "", true);
ss=string_replace(ss, "3", "", true);
ss=string_replace(ss, "4", "", true);
ss=string_replace(ss, "5", "", true);
ss=string_replace(ss, "6", "", true);
ss=string_replace(ss, "7", "", true);
ss=string_replace(ss, "8", "", true);
ss=string_replace(ss, "9", "", true);
ss=string_replace(ss, "concrete", "concret", true);
ss=string_replace(ss, "deepsand", "areia", true);
ss=string_replace(ss, "sand", "areia", true);
ss=string_replace(ss, "cement", "concret", true);
ss=string_replace(ss, "gravel", "terra", true);
ss=string_replace(ss, "rocks", "terra", true);
ss=string_replace(ss, "calcada", "concret", true);
ss=string_replace(ss, "plank", "madeira", true);
ss=string_replace(ss, "wood", "madeira", true);
ss=string_replace(ss, "bridge", "madeira", true);
ss=string_replace(ss, "carpet", "madeira", true);
ss=string_replace(ss, "chair", "metal", true);
ss=string_replace(ss, "deck", "madeira", true);
ss=string_replace(ss, "shortgrass", "grama", true);
ss=string_replace(ss, "grass", "grama", true);
ss=string_replace(ss, "matos", "mato", true);
ss=string_replace(ss, "mud", "barro", true);
if(string_left(ss,4)!="wall") p2.play_2d("bicicleta"+ss+".ogg",me.x,me.y,string_to_number(parsed[2]),string_to_number(parsed[3]),false);
}
}
else if(parsed[0]=="startfloat")
{
floating=true;
}
else if(parsed[0]=="stopfloat")
{
floating=false;
}
else if(parsed[0]=="startcloak")
{
cloaked=true;
}
else if(parsed[0]=="stopcloak")
{
cloaked=false;
}
else if(parsed[0]=="superjumpon") jumpheight=15;
else if(parsed[0]=="superjumpoff") jumpheight=5;
else if(parsed[0]=="spellslist")
{
spellmenu(string_replace(pegar_mensagem(),"spellslist ","",true));
}
else if(parsed[0]=="stopmoving")
{
moveable=false;
}
else if(parsed[0]=="startmoving")
{
moveable=true;
}
else if(parsed[0]=="staron")
{
star=true;
}
else if(parsed[0]=="staroff")
{
star=false;
}
else if(parsed[0]=="mtester") mtester(string_replace(pegar_mensagem(),"mtester ","",true));
else if(parsed[0]=="store")store(string_replace(pegar_mensagem(),"store ","",true));
else if(parsed[0]=="changemap")
{
load_map(string_replace(pegar_mensagem(), "changemap ", "", false));
connect=true;
}
else if(parsed[0]=="changemap2")
{
load_map2(string_replace(pegar_mensagem(), "changemap2 ", "", false));
connect=true;
}
else if(parsed[0]=="invsec"&&parsed.length()>1){
itenssecundarios.resize(0);
itenssecundarios=string_split(string_replace(pegar_mensagem(), parsed[0]+" ", "", false), "\r\n", false);
secundario();
}
else if(parsed[0]=="inv" and parsed.length()>=1)
{
inv=string_replace(pegar_mensagem(),"inv ","",false);
}
else if(parsed[0]=="turn" and parsed.length()>=4)
{
if (parsed[1]!=un and parsed[4]==mapname)
p.play_2d("turn.ogg",me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="rico"&&parsed.length()>3){
if(parsed[1]!="")p.play_2d(parsed[1],me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="spawn_obj" and parsed.length()>=5)
{
if (parsed[3]==mapname)
spawn_obj(string_to_number(parsed[1]),string_to_number(parsed[2]), parsed[4], string_to_number(parsed[5]));
}
else if(parsed[0]=="resetobjs")
{
objs.resize(0);
}
else if (parsed[0]=="getobj")
{
for(uint i=0;i<objs.length();i++)
{
if (objs[i].x==string_to_number(parsed[1]) and objs[i].y==string_to_number(parsed[2]))
{
objs.remove_at(i);
}
}
}
else if(parsed[0]=="atumaquinatempo"){
for(uint i=0;i<maquinatempos.length();i++){
if(maquinatempos[i].id==parsed[1]&&mapname==maquinatempos[i].map){
maquinatempos[i].ligada=string_to_number(parsed[2]);
if(maquinatempos[i].ligada==0){
pobjs.destroy_all();
p.play_2d("geradordesligado.ogg", me.x, me.y, maquinatempos[i].x, maquinatempos[i].y, false);
}
else if(maquinatempos[i].ligada==1){
maquinatempos[i].tligar.restart();
p.play_2d("geradorligado.ogg", me.x, me.y, maquinatempos[i].x, maquinatempos[i].y, false);
}
}
}
}
else if(parsed[0]=="spawnmaquinatempo")
{
spawnmaquinatempo(parsed[1],string_to_number(parsed[2]),string_to_number(parsed[3]),parsed[4], string_to_number(parsed[5]));
}
else if(parsed[0]=="ucomputador")computadormenu();
else if(parsed[0]=="atucomputador"){
for(uint i=0;i<computadors.length();i++){
if(computadors[i].id==parsed[1]&&mapname==computadors[i].map){
computadors[i].ligada=string_to_number(parsed[2]);
if(computadors[i].ligada==0){
pcomputador.destroy_all();
}
else if(computadors[i].ligada==1){
pcomputador.play_2d("desktop1.ogg", me.x, me.y, computadors[i].x, computadors[i].y, true);
}
}
}
}
else if(parsed[0]=="spawncomputador") colocar_computador(parsed[1],string_to_number(parsed[2]),string_to_number(parsed[3]),parsed[4], string_to_number(parsed[5]));
else if(parsed[0]=="djogador") desenvolvedordm=1;
else if(parsed[0]=="finalhit"){
for(uint i=0;i<sons.length();i++){
string[] ss=string_split(sons[i], ":", false);
if(ss[1]==parsed[1]){
p.play_2d(ss[0], me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
if(parsed.length()>7)p.play_2d("v"+string_to_number(parsed[8])+"dor"+random(1,3)+".ogg",me.x,me.y,string_to_number(parsed[2]),string_to_number(parsed[3]),false);
break;
}
}
}
else if(parsed[0]=="impact" and parsed.length()>3)p.play_2d(parsed[1],me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
else if (parsed[0]=="chuvaativa")
{
chuvaativa=1;
chuva();
}
else if(parsed[0]=="fimnovato"){
novato=0;
}
else if(parsed[0]=="ininovato"){
novato=1;
}
else if (parsed[0]=="fimchuva")
{
chuvaativa=0;
chuvatelhado.pause();
}
else if (parsed[0]=="morreu")
{
afogando=0;
congelando=0;
}
else if (parsed[0]=="usarcolete")
{
salvavida=1;
}
else if (parsed[0]=="retirarcolete")
{
salvavida=0;
}
else if(parsed[0]=="carregartaser"){
carregandotaser.play_looped();
moveable=false;
}
else if(parsed[0]=="carregoutaser"){
carregandotaser.pause();
tirostaser=10;
}
else if(parsed[0]=="selecionartirostaser") tirostaser=string_to_number(parsed[1]);
else if(parsed[0]=="bolhadearon") bolhadear=true;
else if(parsed[0]=="bolhaaroff") bolhadear=false;
else if(parsed[0]=="reiniciar") reiniciar();
else if(parsed[0]=="manimais") manimal(string_replace(pegar_mensagem(), "manimais ", "", true));
else if(parsed[0]=="addambiente"){
destroy_all_ambientes();
spawn_ambiente(string_to_number(parsed[1]), string_to_number(parsed[2]), string_to_number(parsed[3]), string_to_number(parsed[4]), parsed[5], "123");
}
else if(parsed[0]=="rsonsmo") destroy_all_msounds();
else if(parsed[0]=="addambiente"){
destroy_all_ambientes();
spawn_ambiente(string_to_number(parsed[1]), string_to_number(parsed[2]), string_to_number(parsed[3]), string_to_number(parsed[4]), parsed[5], "123");
}
else if(parsed[0]=="mmaquina") mmaquina(string_replace(pegar_mensagem(), "mmaquina ", "", true));
else if(parsed[0]=="mnormal") mnormal(string_replace(pegar_mensagem(), "mnormal ", "", true));
else if(parsed[0]=="mnormal2") mnormal2(string_replace(pegar_mensagem(), "mnormal2 ", "", true));
else if(parsed[0]=="mtext") mtext(string_replace(pegar_mensagem(), "mtext ", "", true));
else if(parsed[0]=="cm")createmsound(parsed[1],parsed[2],string_to_number(parsed[3]),string_to_number(parsed[4]),parsed[5]);
else if(parsed[0]=="destroymsound")destroymsound(parsed[1]);
else if(parsed[0]=="um")updatemsound(parsed[1],string_to_number(parsed[2]),string_to_number(parsed[3]));
else if(parsed[0]=="csplay")createsplay(parsed[1],parsed[2], parsed[3]);
else if(parsed[0]=="dsplay")destroysplay(parsed[1]);
else if(parsed[0]=="chutad")chutad();
else if(parsed[0]=="lapartamento"){
if(apartamentoinv=="")add_add_item("variado", pu.get_value("Esse baú está vazío!"));
else apartamentomenu();
}
else if(parsed[0]=="apartamentoinv")apartamentoinv=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
else if(parsed[0]=="opcoespc")opcoespc=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
else if(parsed[0]=="pcliga"){
set_sound_storage("");
p.play_2d("C:\\windows\\media\\Windows Logon Sound.wav", me.x, me.y, 2, 21, false);
set_sound_storage("sounds.dat");
}
else if(parsed[0]=="pcdesliga"){
set_sound_storage("");
p.play_2d("C:\\windows\\media\\Windows Logoff Sound.wav", me.x, me.y, 2, 21, false);
set_sound_storage("sounds.dat");
}
else if(parsed[0]=="mbonus"){
load_map(bonus);
tbonus.restart();
}
else if(parsed[0]=="fm" and add_active("chats")==0){
}
else if(parsed[0]=="fm"&&add_active("chats")==1)
{
p.play_stationary("chatmap.ogg", false);
string mensagem=pegar_mensagem();
mensagem=string_replace(mensagem, parsed[0]+" ", "", true);
mensagem=string_replace(mensagem, "diz:", pu.get_value("diz:")+" ", false);
mensagem=string_replace(mensagem, "Pacifista", pu.get_value("Pacifista"), false);
mensagem=string_replace(mensagem, "Novato", pu.get_value("Novato"), false);
mensagem=string_replace(mensagem, "Novata", pu.get_value("Novata"), false);
mensagem=string_replace(mensagem, "Soldada", pu.get_value("Soldada"), true);
mensagem=string_replace(mensagem, "Soldado", pu.get_value("Soldado"), true);
mensagem=string_replace(mensagem, "Mercenária", pu.get_value("Mercenária"), true);
mensagem=string_replace(mensagem, "Mercenário", pu.get_value("Mercenário"), true);
mensagem=string_replace(mensagem, "Ditadora", pu.get_value("Ditadora"), true);
mensagem=string_replace(mensagem, "Ditador", pu.get_value("Ditador"), true);
mensagem=string_replace(mensagem, "Assassina", pu.get_value("Assassina"), true);
mensagem=string_replace(mensagem, "Assassino", pu.get_value("Assassino"), true);
mensagem=string_replace(mensagem, "Desenvolvedor de guerra", pu.get_value("Desenvolvedor de guerra"), true);
mensagem=string_replace(mensagem, "Chefa da guerra", pu.get_value("Chefa da guerra"), true);
mensagem=string_replace(mensagem, "Chefe da guerra", pu.get_value("Chefe da guerra"), true);
mensagem=string_replace(mensagem, "Presidiário da desgraça ", pu.get_value("Presidiário da desgraça "), true);
mensagem=string_replace(mensagem, "Louca não confiável", pu.get_value("Louca não confiável"), true);
mensagem=string_replace(mensagem, "Louco não confiável", pu.get_value("Louco não confiável"), true);
mensagem=string_replace(mensagem, "Zumbi", pu.get_value("Zumbi"), true);
mensagem=string_replace(mensagem, "Monstro", pu.get_value("Monstro"), true);
mensagem=string_replace(mensagem, "Dinossauro geneticamente modificado", pu.get_value("Dinossauro geneticamente modificado"), true);
mensagem=string_replace(mensagem, "Dinossauro", pu.get_value("Dinossauro"), true);
mensagem=string_replace(mensagem, "Dragão", pu.get_value("Dragão"), true);
mensagem=string_replace(mensagem, "Dragão mutante", pu.get_value("Dragão mutante"), true);
mensagem=string_replace(mensagem, "Robô destruidor", pu.get_value("Robô destruidor"), true);
mensagem=string_replace(mensagem, "Robô mega assassino", pu.get_value("Robô mega assassino"), true);
string m=mensagem;
add_add_item("chats", m);
}
else if(parsed[0]=="saúdenomáximo"){
string m=pu.get_value("Sua saúde está no máximo!");
add_add_item("variado", m);
}
else if(parsed[0]=="nãoestávestindo"){
string m=pu.get_value("Mas você não está vestindo isso!");
add_add_item("variado", m);
}
else if(parsed[0]=="noleilão"){
string m=pu.get_value("No leilão:")+" "+pu.get_value(parsed[1])+", "+pu.get_value("quantidade")+" "+parsed[2]+", "+pu.get_value("valendo")+" "+parsed[3]+" coins.";
add_add_item("variado", m);
}
else if(parsed[0]=="msgquebrourecord"){
string m=parsed[1]+" "+pu.get_value("quebrou o record de assassinatos de")+" "+parsed[2]+" "+pu.get_value("com")+" "+parsed[3]+" "+pu.get_value("assassinatos")+"!";
add_add_item("variado", m);
}
else if(parsed[0]=="msgapróximaoferta"){
string m=pu.get_value("A próxima oferta deve ser de")+" "+parsed[1]+" coins.";
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêenterra"){
string m=pu.get_value("Você enterra")+" "+pu.get_value(parsed[1])+". "+pu.get_value("Ótimo trabalho!");
add_add_item("variado", m);
}
else if(parsed[0]=="msghits"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" ", "", true);
a=string_replace(a, "Você bateu em", pu.get_value("Você bateu em"), true);
a=string_replace(a, "impactando", pu.get_value("impactando"), true);
a=string_replace(a, "Este golpe deixou um pequenino filete de sangue em sua bochecha.", pu.get_value("Este golpe deixou um pequenino filete de sangue em sua bochecha."), true);
a=string_replace(a, "Você foi atingido de raspão e perdeu alguns fios de cabelo no processo.", pu.get_value("Você foi atingido de raspão e perdeu alguns fios de cabelo no processo."), true);
a=string_replace(a, "Você foi atingida de raspão e perdeu alguns fios de cabelo no processo.", pu.get_value("Você foi atingida de raspão e perdeu alguns fios de cabelo no processo."), true);
a=string_replace(a, "Por pouco você não perdeu um pedaço da orelha agora! Mas ganhou um machucado.", pu.get_value("Por pouco você não perdeu um pedaço da orelha agora! Mas ganhou um machucado."), true);
a=string_replace(a, "Você recebeu um golpe na cabeça... Esse foi quase fatal!", pu.get_value("Você recebeu um golpe na cabeça... Esse foi quase fatal!"), true);
a=string_replace(a, "Esta porrada na lateral do seu crânio te deixou bem  tonto!", pu.get_value("Esta porrada na lateral do seu crânio te deixou bem  tonto!"), true);
a=string_replace(a, "Esta porrada na lateral do seu crânio te deixou bem  tonta!", pu.get_value("Esta porrada na lateral do seu crânio te deixou bem  tonta!"), true);
a=string_replace(a, "Seu crânio foi atravessado, o sangue ensopa seu rosto... É um milagre que você ainda esteja vivo...", pu.get_value("Seu crânio foi atravessado, o sangue ensopa seu rosto... É um milagre que você ainda esteja vivo..."), true);
a=string_replace(a, "Seu crânio foi atravessado, o sangue ensopa seu rosto... É um milagre que você ainda esteja viva...", pu.get_value("Seu crânio foi atravessado, o sangue ensopa seu rosto... É um milagre que você ainda esteja viva..."), true);
a=string_replace(a, "Seu maxilar foi atingido e se partiu. Um gosto metálico de sangue enche sua boca.", pu.get_value("Seu maxilar foi atingido e se partiu. Um gosto metálico de sangue enche sua boca."), true);
a=string_replace(a, "O impacto deste golpe jogou sua cabeça para trás e te fez deslocar o pescoço.", pu.get_value("O impacto deste golpe jogou sua cabeça para trás e te fez deslocar o pescoço."), true);
a=string_replace(a, "Algo raspou em seu braço direito e fez um pequeno talho.", pu.get_value("Algo raspou em seu braço direito e fez um pequeno talho."), true);
a=string_replace(a, "Algo raspou em seu braço esquerdo e fez um pequeno talho.", pu.get_value("Algo raspou em seu braço esquerdo e fez um pequeno talho."), true);
a=string_replace(a, "Seu antebraço foi atingido bem levemente.", pu.get_value("Seu antebraço foi atingido bem levemente."), true);
a=string_replace(a, "Você quase perdeu o braço esquerdo por  causa deste golpe!", pu.get_value("Você quase perdeu o braço esquerdo por  causa deste golpe!"), true);
a=string_replace(a, "Você quase perdeu o braço direito por  causa deste golpe!", pu.get_value("Você quase perdeu o braço direito por  causa deste golpe!"), true);
a=string_replace(a, "Você quase perdeu os braços por causa deste golpe!", pu.get_value("Você quase perdeu os braços por causa deste golpe!"), true);
a=string_replace(a, "Alguma artéria do seu pulso foi atingida e todo o local se pinta de vermelho com seu sangue.", pu.get_value("Alguma artéria do seu pulso foi atingida e todo o local se pinta de vermelho com seu sangue."), true);
a=string_replace(a, "Você aparou um golpe com um dos braços, mas agora este tem uma terrível fratura exposta.", pu.get_value("Você aparou um golpe com um dos braços, mas agora este tem uma terrível fratura exposta."), true);
a=string_replace(a, "Seu antebraço foi atravessado por um golpe poderoso!", pu.get_value("Seu antebraço foi atravessado por um golpe poderoso!"), true);
a=string_replace(a, "Um golpe arrancou um pedaço das suas roupas e causou um pequeno ferimento em seu tórax.", pu.get_value("Um golpe arrancou um pedaço das suas roupas e causou um pequeno ferimento em seu tórax."), true);
a=string_replace(a, "Você ganhou um corte na barriga. Não parece sério, mas está coçando!", pu.get_value("Você ganhou um corte na barriga. Não parece sério, mas está coçando!"), true);
a=string_replace(a, "Te acertaram na barriga! Ouch, como isso dói!", pu.get_value("Te acertaram na barriga! Ouch, como isso dói!"), true);
a=string_replace(a, "O impacto recebido no peito te deixou sem ar.", pu.get_value("O impacto recebido no peito te deixou sem ar."), true);
a=string_replace(a, "Você foi atingido na lateral do corpo. Por pouco não teve os órgãos internos atingidos também.", pu.get_value("Você foi atingido na lateral do corpo. Por pouco não teve os órgãos internos atingidos também."), true);
a=string_replace(a, "Você sentiu algo perfurando suas costelas... Uma ou outra se partiu.", pu.get_value("Você sentiu algo perfurando suas costelas... Uma ou outra se partiu."), true);
a=string_replace(a, "Seu peito foi atravessado por um poderoso golpe.", pu.get_value("Seu peito foi atravessado por um poderoso golpe."), true);
a=string_replace(a, "Muito sangue escorre do seu ferimento ressém-adquirido na barriga.", pu.get_value("Muito sangue escorre do seu ferimento ressém-adquirido na barriga."), true);
a=string_replace(a, "Algo raspou em sua coxa direita e fez um pequeno talho.", pu.get_value("Algo raspou em sua coxa direita e fez um pequeno talho."), true);
a=string_replace(a, "Algo raspou em sua coxa esquerda e fez um pequeno talho.", pu.get_value("Algo raspou em sua coxa esquerda e fez um pequeno talho."), true);
a=string_replace(a, "Sua panturrilha foi atingida bem levemente.", pu.get_value("Sua panturrilha foi atingida bem levemente."), true);
a=string_replace(a, "Você quase perdeu o equilíbrio, graças ao golpe recebido na perna.", pu.get_value("Você quase perdeu o equilíbrio, graças ao golpe recebido na perna."), true);
a=string_replace(a, "Acertaram sua coxa! Você se controla para não se dobrar de dor.", pu.get_value("Acertaram sua coxa! Você se controla para não se dobrar de  dor."), true);
a=string_replace(a, "Ai, essa te acertou bem na canela...", pu.get_value("Ai, essa te acertou bem na canela..."), true);
a=string_replace(a, "Sua coxa foi atravessada por um golpe poderoso!", pu.get_value("Sua coxa foi atravessada por um golpe poderoso!"), true);
a=string_replace(a, "Um de seus joelhos foi atingido e todo seu corpo convulciona em dor.", pu.get_value("Um de seus joelhos foi atingido e todo seu corpo convulciona em dor."), true);
a=string_replace(a, "Este golpe fez um buraco horroroso em sua canela.", pu.get_value("Este golpe fez um buraco horroroso em sua canela."), true);
string m=a;
add_add_item("variado", m);
}
else if(parsed[0]=="msgpaje") add_add_item("variado", pu.get_value("Pajé: Preciso de")+" "+pu.get_value(parsed[1])+".");
else if(parsed[0]=="msgnãoestávestindo") add_add_item("variado", pu.get_value("Mas você não está vestindo isso!"));
else if(parsed[0]=="msglinha"){
string m;
string a=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
string[] b=string_split(a, "\r\n", false);
for(uint i=0;i<b.length();i++){
if(m=="")m+=pu.get_value(b[i]);
else m+="\r\n"+pu.get_value(b[i]);
}
add_add_item("variado", m);
}
else if(parsed[0]=="msglinha2"){
string m;
string a=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
string[] b=string_split(a, ":", false);
for(uint i=0;i<b.length();i++){
m+=pu.get_value(b[i]);
}
add_add_item("variado", m);
}
else if(parsed[0]=="msg2"){
string m;
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" ", "", false);
string[] b=string_split(a, ";", false);
for(uint i=0;i<b.length();i++){
m+=pu.get_value(b[i]);
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêganhamais"){
string m=pu.get_value("Você ganha mais")+" "+parsed[1]+" "+pu.get_value("pelo doublegold.");
}
else if(parsed[0]=="msgpegouitem"){
string a=parsed[2];
string b;
if(string_contains(a, "corpo_de", 1)>-1){
a=string_replace(a, "corpo_de_", "", true);
a=string_replace(a, a, pu.get_value(a), true);
b=pu.get_value("corpo_de")+"_"+a;
}
else if(string_contains(a, "chave_da_lancha_de_", 1)>-1){
a=string_replace(a, "chave_da_lancha_de_", "", true);
a=string_replace(a, a, pu.get_value(a), true);
b=pu.get_value("chave_da_lancha_de")+"_"+a;
}
else b=pu.get_value(a);
string m=parsed[1]+" "+b;
add_add_item("variado", m);
}
else if(parsed[0]=="msgfezaoferta"){
if(ouvirleilao==1){
string m=parsed[1]+" "+pu.get_value("fez a oferta de")+" "+parsed[2]+" coins!";
add_add_item("leilão", m);
}
}
else if(parsed[0]=="msgafogada"){
string m=parsed[1]+" "+pu.get_value("morreu afogada!");
add_add_item("mortes", m);
}
else if(parsed[0]=="msgafogado"){
string m=parsed[1]+" "+pu.get_value("morreu afogada!");
add_add_item("mortes", m);
}
else if(parsed[0]=="msgcaiunamina"){
string m=parsed[1]+" "+pu.get_value("caiu na mina de")+" "+parsed[2]+" "+pu.get_value("no mapa")+" "+parsed[3];
add_add_item("mortes", m);
}
else if(parsed[0]=="msgvocêganhou"){
string m=pu.get_value("Você ganhou")+" "+parsed[1]+" xp!";
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêganhou2"){
string m=pu.get_value("Você ganhou mais")+" "+parsed[1]+" "+pu.get_value("pontos de experiência pelo doublexp!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgpossuixp"){
string m=parsed[1]+" "+pu.get_value("possui")+" "+parsed[2]+" "+pu.get_value("Pontos de experiência.");
add_add_item("variado", m);
}
else if(parsed[0]=="msgvestindo"){
string a=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
string m;
a=string_replace(a, "Você está pelado!", pu.get_value("Você está pelado!"), true);
a=string_replace(a, "Você está pelada!", pu.get_value("Você está pelada!"), true);
a=string_replace(a, "está pelado!", pu.get_value("está pelado!"), true);
a=string_replace(a, "Ninguém perto de você.", pu.get_value("Ninguém perto de você."), false);
a=string_replace(a, "está pelada!", pu.get_value("está pelada!"), true);
a=string_replace(a, "Você está vestindo:", pu.get_value("Você está vestindo:"), true);
a=string_replace(a, "está vestindo:", pu.get_value("está vestindo:"), true);
a=string_replace(a, "Você está usando apenas", pu.get_value("Você está usando apenas"), true);
string[] b=string_split(a, " ", false);
for(uint i=0; i < b.length(); i++){
if(string_contains(b[i],",",1)!=-1){
b[i]=string_replace(b[i], ",", "", true);
b[i]=string_replace(b[i], b[i], pu.get_value(b[i])+",", true);
}
if(string_contains(b[i],".",1)!=-1){
b[i]=string_replace(b[i], ".", "", true);
b[i]=string_replace(b[i], b[i], pu.get_value(b[i])+".", true);
}
b[i]=string_replace(b[i], "um", pu.get_value("um"), true);
b[i]=string_replace(b[i], ", uma", ", "+pu.get_value("uma"), true);
b[i]=string_replace(b[i], "onea", pu.get_value("um"), true);
}
for(uint i=0; i < b.length(); i++){
m+=b[i]+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgonlines"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" ", "", true);
a=string_replace(a, "você está só.", pu.get_value("você está só."), true);
a=string_replace(a, "em outro lugar.", pu.get_value("em outro lugar."), true);
a=string_replace(a, "aqui,", pu.get_value("aqui,"), true);
a=string_replace(a, "Apenas", pu.get_value("Apenas"), false);
a=string_replace(a, "no jogo", pu.get_value("no jogo"), false);
a=string_replace(a, "Nenhum", pu.get_value("Nenhum"), true);
a=string_replace(a, "Novato", pu.get_value("Novato"), true);
a=string_replace(a, "Novata", pu.get_value("Novata"), true);
a=string_replace(a, "Desenvolvedor", pu.get_value("Desenvolvedor"), true);
a=string_replace(a, "Desenvolvedora", pu.get_value("Desenvolvedora"), true);
a=string_replace(a, "Pacifista", pu.get_value("Pacifista"), true);
a=string_replace(a, "Presidente", pu.get_value("Presidente"), true);
a=string_replace(a, "Soldada", pu.get_value("Soldada"), true);
a=string_replace(a, "Soldado", pu.get_value("Soldado"), true);
a=string_replace(a, "Mercenária", pu.get_value("Mercenária"), true);
a=string_replace(a, "Mercenário", pu.get_value("Mercenário"), true);
a=string_replace(a, "Ditadora", pu.get_value("Ditadora"), true);
a=string_replace(a, "Ditador", pu.get_value("Ditador"), true);
a=string_replace(a, "Assassina", pu.get_value("Assassina"), true);
a=string_replace(a, "Assassino", pu.get_value("Assassino"), true);
a=string_replace(a, "Desenvolvedor de guerra", pu.get_value("Desenvolvedor de guerra"), true);
a=string_replace(a, "Chefa da guerra", pu.get_value("Chefa da guerra"), true);
a=string_replace(a, "Chefe da guerra", pu.get_value("Chefe da guerra"), true);
a=string_replace(a, "Presidiário da desgraça ", pu.get_value("Presidiário da desgraça "), true);
a=string_replace(a, "Louca não confiável", pu.get_value("Louca não confiável"), true);
a=string_replace(a, "Louco não confiável", pu.get_value("Louco não confiável"), true);
a=string_replace(a, "Zumbi", pu.get_value("Zumbi"), true);
a=string_replace(a, "Monstro", pu.get_value("Monstro"), true);
a=string_replace(a, "Dinossauro geneticamente modificado", pu.get_value("Dinossauro geneticamente modificado"), true);
a=string_replace(a, "Dinossauro", pu.get_value("Dinossauro"), true);
a=string_replace(a, "Dragão", pu.get_value("Dragão"), true);
a=string_replace(a, "Dragão mutante", pu.get_value("Dragão mutante"), true);
a=string_replace(a, "Robô destruidor", pu.get_value("Robô destruidor"), true);
a=string_replace(a, "Robô mega assassino", pu.get_value("Robô mega assassino"), true);
a=string_replace(a, "assassinato", pu.get_value("assassinato"), true);
a=string_replace(a, "assassinatos", pu.get_value("assassinatos"), true);
a=string_replace(a, "aqui", pu.get_value("aqui"), false);
a=string_replace(a, "em outro lugar", pu.get_value("em outro lugar"), false);
a=string_replace(a, "com", pu.get_value("com"), true);
string m=a;
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocênãotem2"){
string m=pu.get_value("Você não tem")+" "+parsed[1]+" "+parsed[2]+".";
add_add_item("variado", m);
}
else if(parsed[0]=="msglerquadro"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" ", "", true);
a=string_replace(a, "Tem", pu.get_value("Tem"), false);
a=string_replace(a, "uma mensagem.", pu.get_value("uma mensagem"), true);
a=string_replace(a, "mensagens.", pu.get_value("mensagens."), false);
a=string_replace(a, "Mensagem número", pu.get_value("Mensagem número"), true);
a=string_replace(a, "Enviada por", pu.get_value("Enviada por"), true);
a=string_replace(a, "em", pu.get_value("em"), false);
a=string_replace(a, "Domingo", pu.get_value("Domingo"), true);
a=string_replace(a, "Segunda-Feira", pu.get_value("Segunda-Feira"), true);
a=string_replace(a, "Terça-Feira", pu.get_value("Terça-Feira"), true);
a=string_replace(a, "Quarta-Feira", pu.get_value("Quarta-Feira"), true);
a=string_replace(a, "Quarta-Feira", pu.get_value("Quarta-Feira"), true);
a=string_replace(a, "Quinta-Feira", pu.get_value("Quinta-Feira"), true);
a=string_replace(a, "Sexta-Feira", pu.get_value("Sexta-Feira"), true);
a=string_replace(a, "Sábado", pu.get_value("Sábado"), true);
add_add_item("variado", a);
}
else if(parsed[0]=="msgnovoleilão"){
string m=pu.get_value("Novo leilão por")+" "+parsed[1]+"! "+parsed[2]+" "+pu.get_value(parsed[3])+", "+pu.get_value("lance mínimo de")+" "+parsed[4]+" coins.";
add_add_item("leilão", m);
}
else if(parsed[0]=="msganimal"){
string a=pegar_mensagem();
string b;
string m;
a=string_replace(a, parsed[0]+" ", "", true);
string[] mm=string_split(a," ",false);
for(uint i=0; i < mm.length(); i++){
b=mm[i];
b=string_replace(b, "_", " ", true);
m+=pu.get_value(b)+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgsublinhado"){
string a=pegar_mensagem();
string b;
string m;
a=string_replace(a, parsed[0]+" ", "", true);
string[] mm=string_split(a," ",false);
for(uint i=0; i < mm.length(); i++){
b=mm[i];
b=string_replace(b, "_", " ", true);
m+=pu.get_value(b)+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgdepois"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" "+parsed[1]+" ", "", true);
string m=parsed[1]+" "+pu.get_value(a);
add_add_item("variado", m);
}
else if(parsed[0]=="msgcompleto"){
string mm=string_to_number(parsed[1]);
string m;
if(mm==1) m=pu.get_value("Completo!")+" "+pu.get_value(parsed[1])+" "+pu.get_value("item removido do jogo.");
else if(mm<1||mm>1) m=pu.get_value("Completo!")+" "+pu.get_value(parsed[1])+" "+pu.get_value("itens removidos do jogo.");
}
else if(parsed[0]=="msgvida"){
string m=parsed[1]+" "+pu.get_value("de")+" "+parsed[2];
add_add_item("variado", m);
}
else if(parsed[0]=="msgvida2"){
string m=parsed[1]+" "+pu.get_value("porcento")+" "+parsed[2];
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocênãotem"){
string m=pu.get_value("Você não tem isso.");
add_add_item("variado", m);
}
else if(parsed[0]=="msglhedeu"){
string m=parsed[1]+" "+pu.get_value("lhe deu")+" "+parsed[2]+" "+pu.get_value(parsed[3])+".";
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêdeu"){
string m=pu.get_value("Você deu")+" "+parsed[1]+" "+pu.get_value(parsed[2])+" "+pu.get_value("para")+" "+parsed[3]+".";
add_add_item("variado", m);
}
else if(parsed[0]=="msgstats"){
string m=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
m=string_replace(m, "enviou", pu.get_value("enviou"), false);
m=string_replace(m, "matou", pu.get_value("matou"), false);
m=string_replace(m, "pessoas, e morreu", pu.get_value("pessoas, e morreu"), false);
m=string_replace(m, "vezes, e tem", pu.get_value("vezes, e tem"), false);
m=string_replace(m, "de", pu.get_value("de"), false);
m=string_replace(m, "de vida", pu.get_value("de vida"), false);
add_add_item("variado", m);
}
else if(parsed[0]=="msgnormal"){
string m=string_replace(pegar_mensagem(), parsed[0]+" ", "", true);
add_add_item("variado", pu.get_value(m));
}
else if(parsed[0]=="msgmagnetiniciado"){
string m=pu.get_value("Seu item magnético foi iniciado.");
add_add_item("variado", m);
}
else if(parsed[0]=="msgninguémcomesteitem"){
string m=pu.get_value("Ninguém com este item!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgumcomesteitem"){
string m=pu.get_value("Apenas uma pessoa com este item... Descubra qual é!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgoutrositens"){
string m;
string mensagem=pegar_mensagem();
mensagem=string_replace(mensagem, parsed[0], "", true);
string[] par=string_split(mensagem, " ", false);
for(uint i=0; i <par.length(); i++){
m+=pu.get_value(par[i])+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgsemcoins"){
string m=pu.get_value("Você não tem ")+" "+parsed[1]+" coins.";
}
else if(parsed[0]=="msgentrega"){
string m=pu.get_value("Você entrega")+" "+pu.get_value(parsed[1])+" "+pu.get_value(parsed[2])+" "+pu.get_value("e recebe")+" "+pu.get_value(parsed[3])+".";
add_add_item("variado", m);
}
else if(parsed[0]=="msgpegousuamina"){
string m=pu.get_value("Você pegou sua mina.");
add_add_item("variado", m);
}
else if(parsed[0]=="msgpeçasobreoutra"){
string m=pu.get_value("Você está tentando vestir uma peça sobre outra. Isso não vai funcionar.");
add_add_item("variado", m);
}
else if(parsed[0]=="msgestecanal"){
string m=pu.get_value("Você não pode usar este canal!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgjáestávestindo"){
string m=pu.get_value("Mas você já está vestindo isso!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêenterra"){
string m=pu.get_value("Você enterra o")+" "+parsed[1]+". "+pu.get_value("Ótimo trabalho!")+" "+parsed[2];
add_add_item("variado", m);
}
else if(parsed[0]=="msgpreparardecolagem"){
string m=pu.get_value("Atenção passageiros, preparar para a decolagem!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgtravelpoint"){
string mm=pegar_mensagem();
mm=string_replace(mm, "msgtravelpoint ", "", false);
string m=pu.get_value(mm);
add_add_item("variado", m);
}
else if(parsed[0]=="msgservidorativo")
{
string m=pu.get_value("O servidor está online à")+" ";
string pars=string_replace(pegar_mensagem(), "msgservidorativo ", "", true);
string[] par=string_split(pars, " ", false);
for(uint i=0; i<par.length();i++){
m+=pu.get_value(par[i])+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgrelogio")
{
string m;
string pars=string_replace(pegar_mensagem(), "msgrelogio ", "", true);
string[] par=string_split(pars, " ", false);
for(uint i=0; i<par.length();i++){
m+=pu.get_value(par[i])+" ";
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgumoumaisjogadoresdessavenda"){
string m=pu.get_value("Leilão cancelado. Um ou mais jogadores desta venda está faltando.");
if(ouvirleilao==1){
add_add_item("leilão", m);
}
}
else if(parsed[0]=="msgleilãonãoépermitido"){
string m=pu.get_value("Leilão cancelado. Não é permitido leiloar este item.");
if(ouvirleilao==1) add_add_item("leilão", m);
}
else if(parsed[0]=="msgcoinsfaltandoparaoleilão"){
string m=pu.get_value("Leilão cancelado. O jogador retirou o dinheiro do inventário.");
if(ouvirleilao==1) add_add_item("leilão", m);
}
else if(parsed[0]=="msgleilaoconcluido"){
if(ouvirleilao==1){
string m=pu.get_value("Leilão concluído! Item vendido para")+" "+parsed[1]+".";
add_add_item("leilão", m);
}
}
else if(parsed[0]=="msgleilãoterminado"){
if(ouvirleilao==1){
string m=pu.get_value("Leilão terminado. Item retornado para")+" "+parsed[1]+".";
add_add_item("leilão", m);
}
}
else if(parsed[0]=="msgjogadornãoencontrado"){
string m=pu.get_value("Jogador não encontrado.");
add_add_item("variado", m);
}
else if(parsed[0]=="msgchegamosaumnovorecorde"){
string m=pu.get_value("Chegamos a um novo recorde de")+" "+parsed[1]+" "+pu.get_value("jogadores!");
add_add_item("variado", m);
}
else if(parsed[0]=="msgmultada"){
string m=pu.get_value("Você é surpreendida por um guarda! \"Não pode pizar na grama\", ele diz, e te entrega uma multa de")+" "+parsed[1]+" coins";
add_add_item("variado", m);
}
else if(parsed[0]=="msgmultado"){
string m=pu.get_value("Você é surpreendido por um guarda! \"Não pode pizar na grama\", ele diz, e te entrega uma multa de")+" "+parsed[1]+" coins";
add_add_item("variado", m);
}
else if(parsed[0]=="vocêganhou"){
string m=pu.get_value("Você ganhou")+" "+parsed[1]+" xp!";
if(ouvirxp) add_add_item("mortes", m);
}
else if(parsed[0]=="motd")
{
string mensagem=pegar_mensagem();
mensagem=string_replace(mensagem, parsed[0]+" "+parsed[1]+" "+parsed[2], "", true);
string m1=pu.get_value(parsed[1]+" ao Fight to the death!")+" "+pu.get_value("Versão")+" "+parsed[2]+". "+pu.get_value("Tecle /ajuda para saber os comandos. Tecle /novidades para saber as novas mudanças nesta versão do servidor.")+" "+pu.get_value("Mensagem do dia:")+" "+pu.get_value(mensagem);
add_add_item("player", m1);
temponaoevoce.force(10000);
}
else if(parsed[0]=="motd2")
{
string mensagem=pegar_mensagem();
mensagem=string_replace(mensagem, parsed[0]+" ", "", true);
add_add_item("player", pu.get_value("Mensagem do dia:")+" "+pu.get_value(mensagem));
}
else if(parsed[0]=="responder" and parsed.length()>=1)
{
string mensagem=string_replace(pegar_mensagem(),"responder: ","",true);
string mensagem2=string_replace(mensagem,"responde você: ","",true);
string mensagem3=mensagem2;
mensagem3=string_replace(mensagem2,parsed[1]+" ","",true);
mensagem3=string_replace(mensagem3,parsed[0]+" ","",true);
add_add_item("chats", pu.get_value("Alguém responde você:")+mensagem3);
}
else if(parsed[0]=="volumechuva")
{
chuvalivre.volume=string_to_number(parsed[1]);
chuvatelhado.volume=string_to_number(parsed[1]);
}
else if(parsed[0]=="carregar" and parsed.length()>=5)
{
if(parsed[5]==mapname)
p.play_2d(parsed[2],me.x, me.y, string_to_number(parsed[3]), string_to_number(parsed[4]), false);
}
else if(parsed[0]=="social" and parsed.length()>=1)
{
p.play_2d(parsed[2],me.x, me.y, string_to_number(parsed[3]), string_to_number(parsed[4]), false);
}
else if(parsed[0]=="draw"&&parsed.length()>=5){
if (parsed[1]!=un)p.play_2d(parsed[2],me.x, me.y, string_to_number(parsed[3]), string_to_number(parsed[4]), false);
}
else if(parsed[0]=="key1" and parsed.length()>=4)
{
if (mapname==parsed[3])
p.play_2d("key"+random(1,5)+".ogg",me.x, me.y, string_to_number(parsed[1]), string_to_number(parsed[2]), false);
}
else if(parsed[0]=="key5" and parsed.length()>=4)
{
if (mapname==parsed[3])
p.play_2d("keytype"+random(1,5)+".ogg",me.x, me.y, string_to_number(parsed[1]), string_to_number(parsed[2]), false);
}
else if(parsed[0]=="key2" and parsed.length()>=4)
{
if (mapname==parsed[3])
p.play_2d("keyspace.ogg",me.x, me.y, string_to_number(parsed[1]), string_to_number(parsed[2]), false);
}
else if(parsed[0]=="key3" and parsed.length()>=4)
{
if (mapname==parsed[3])
p.play_2d("keydelete.ogg",me.x, me.y, string_to_number(parsed[1]), string_to_number(parsed[2]), false);
}
else if(parsed[0]=="key4" and parsed.length()>=4)
{
if (mapname==parsed[3])
p.play_2d("keyreturn.ogg",me.x, me.y, string_to_number(parsed[1]), string_to_number(parsed[2]), false);
}
else if(parsed[0]=="camera" and parsed.length()>=4)
{
if (parsed[3]!=un)
playcameracustom(string_to_number(parsed[1]), string_to_number(parsed[2]));
}
else if(parsed[0]=="move" and parsed.length()>=2)
{
me.x=string_to_number(parsed[1]);
me.y=string_to_number(parsed[2]);
}
else if(parsed[0]=="pan"&&parsed.length()>2)p.play_stationary_extended(parsed[1], false, 0, string_to_number(parsed[2]), 0, 100, false);
else if(parsed[0]=="play"&&parsed.length()>3)
{
p.play_2d(parsed[1],me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="rs"&&parsed.length()>1){
for(uint i=0;i<sons.length();i++){
string[] ss=string_split(sons[i], ":", false);
if(ss[1]==parsed[1]){
p.play_2d(ss[0], me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
break;
}
}
}
else if(parsed[0]=="ldf"){
send_reliable(peer_id, "lancha d", 0);
lan.desliga.play();
while(lan.desliga.playing){
wait(5);
mainloop();
}
lan.ligou=false;
}
else if(parsed[0]=="fbau")fbau=1;
else if(parsed[0]=="pst"){
if(somchuva!="rain4.ogg"){
sound t;
t.load(parsed[1]);
string vo="-"+random(3, 5);
t.volume=string_to_number(vo);
t.play();
}
else if(somchuva=="rain4.ogg"){
p.play_stationary(parsed[1], false);
}
}
else if(parsed[0]=="p2d"){
p.play_2d(parsed[1], me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="seguro")nvaicair=1;
else if(parsed[0]=="asapato")studo=1;
else if(parsed[0]=="rsapato")studo=0;
else if(parsed[0]=="lanchaliga")lan.loop();
else if(parsed[0]=="lanchaid2")lan.id="";
else if(parsed[0]=="lanchaid")lan.id=parsed[1];
else if(parsed[0]=="aveloz")dveloz=1;
else if(parsed[0]=="dveloz")dveloz=0;
else if(parsed[0]=="sjog"&&parsed.length()>1)pmapa(string_to_number(parsed[1]), string_replace(pegar_mensagem(), parsed[0]+" "+parsed[1]+" ", "", false));
else if(parsed[0]=="ausente0")ausente=false;
else if(parsed[0]=="ausente1")ausente=true;
else if(parsed[0]=="ps"&&parsed.length()>=2)
{
p.play_stationary(parsed[1],false);
}
else if(parsed[0]=="play_file" and parsed.length>=2)
{
p.play_stationary(string_trim_left(pegar_mensagem(),10),false,true);
}
else if(parsed[0]=="f"&&parsed.length()>3){
p.play_2d(parsed[1],me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="f2"&&parsed.length()>3){
if(string_contains(parsed[2], "galil", 1)>-1&&parsed[1]!=un)p.play_2d(parsed[2],me.x, me.y, string_to_number(parsed[3]), string_to_number(parsed[4]), false);
}
else if(parsed[0]=="land" and parsed.length()>=6)
{
int fh=string_to_number(parsed[5]);
if (parsed[1]!=un and parsed[4]==mapname)
{
if (fh<20)
p.play_2d(get_tile_at(string_to_number(parsed[2]), string_to_number(parsed[3]))+"land.ogg",me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
else
p.play_2d(get_tile_at(string_to_number(parsed[2]), string_to_number(parsed[3]))+"hardland.ogg",me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
}
else if(parsed[0]=="kill"&&temponaoevoce.elapsed>=5000)
{
send_reliable(peer_id, "close", 0);
writeprefs();
wait(200);
exit();
}
else if(parsed[0]=="jumping" and parsed.length()>=5)
{
if (parsed[1]!=un and parsed[4]==mapname)
p.play_2d("jump.ogg", me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="wall" and parsed.length()>=5)
{
if (parsed[1]!=un)
p.play_2d(parsed[4]+".ogg", me.x, me.y, string_to_number(parsed[2]), string_to_number(parsed[3]), false);
}
else if(parsed[0]=="inithurt")p.play_2d("v"+string_to_number(parsed[1])+"dor"+random(1,3)+".ogg",me.x,me.y,string_to_number(parsed[2]),string_to_number(parsed[3]),false);
else if(parsed[0]=="on")
{
if(avisadesconectou==0){
string who=string_replace(pegar_mensagem(), parsed[0]+" ", "", true);
if(who!=un){
p2.play_stationary("online.ogg", false);
string mes=who+" "+pu.get_value("conectou-se.");
add_add_item("conexões",mes);
}
}
}
else if(parsed[0]=="off"){
if(parsed[1]==un){
if(string_to_number(parsed[3])==1){
speak(pu.get_value("Conexão caiu."));
wait(400);
reiniciar();
}
else{
wait(200);
reset();
menuprincipal();
}
}
if(parsed[1]!=un){
remplayer(parsed[1]);
if(string_to_number(parsed[2])==0){
if(avisadesconectou==0){
string mes=parsed[1]+" "+pu.get_value("desconectou-se.");
p2.play_stationary("offline.ogg", false);
add_add_item("conexões",mes);
}
}
}
}
else if(parsed[0]=="pm"||parsed[0]=="you"&&parsed[1]=="reply:")
{
p.play_stationary("message.ogg", false);
string mes=pegar_mensagem();
mes=string_replace(mes, "/reply ", "", false);
mes=string_replace(mes, "/r ", "", false);
mes=string_replace(mes, "pm de", pu.get_value("pm de"), false);
mes=string_replace(mes, "pm para", pu.get_value("pm para"), false);
add_add_item("pm",mes);
}
else
{
add_add_item("variado",pegar_mensagem());
}
}
else if(event.type==event_receive and event.channel==1 and add_active("chats")==1&&event.peer_id==peer_id)
{
p.play_stationary("chat.ogg", false);
string[] parsed=string_split(pegar_mensagem(), " ", false);
string mensagem=string_replace(pegar_mensagem(), parsed[0]+" ", "", false);
mensagem=string_replace(mensagem, "diz:", pu.get_value("diz:")+" ", false);
mensagem=string_replace(mensagem, "Pacifista", pu.get_value("Pacifista"), false);
mensagem=string_replace(mensagem, "Novato", pu.get_value("Novato"), false);
mensagem=string_replace(mensagem, "Novata", pu.get_value("Novata"), false);
mensagem=string_replace(mensagem, "Soldada", pu.get_value("Soldada"), true);
mensagem=string_replace(mensagem, "Soldado", pu.get_value("Soldado"), true);
mensagem=string_replace(mensagem, "Mercenária", pu.get_value("Mercenária"), true);
mensagem=string_replace(mensagem, "Mercenário", pu.get_value("Mercenário"), true);
mensagem=string_replace(mensagem, "Ditadora", pu.get_value("Ditadora"), true);
mensagem=string_replace(mensagem, "Ditador", pu.get_value("Ditador"), true);
mensagem=string_replace(mensagem, "Assassina", pu.get_value("Assassina"), true);
mensagem=string_replace(mensagem, "Assassino", pu.get_value("Assassino"), true);
mensagem=string_replace(mensagem, "Desenvolvedor de guerra", pu.get_value("Desenvolvedor de guerra"), true);
mensagem=string_replace(mensagem, "Chefa da guerra", pu.get_value("Chefa da guerra"), true);
mensagem=string_replace(mensagem, "Chefe da guerra", pu.get_value("Chefe da guerra"), true);
mensagem=string_replace(mensagem, "Presidiário da desgraça ", pu.get_value("Presidiário da desgraça "), true);
mensagem=string_replace(mensagem, "Louca não confiável", pu.get_value("Louca não confiável"), true);
mensagem=string_replace(mensagem, "Louco não confiável", pu.get_value("Louco não confiável"), true);
mensagem=string_replace(mensagem, "Zumbi", pu.get_value("Zumbi"), true);
mensagem=string_replace(mensagem, "Monstro", pu.get_value("Monstro"), true);
mensagem=string_replace(mensagem, "Dinossauro geneticamente modificado", pu.get_value("Dinossauro geneticamente modificado"), true);
mensagem=string_replace(mensagem, "Dinossauro", pu.get_value("Dinossauro"), true);
mensagem=string_replace(mensagem, "Dragão", pu.get_value("Dragão"), true);
mensagem=string_replace(mensagem, "Dragão mutante", pu.get_value("Dragão mutante"), true);
mensagem=string_replace(mensagem, "Robô destruidor", pu.get_value("Robô destruidor"), true);
mensagem=string_replace(mensagem, "Robô mega assassino", pu.get_value("Robô mega assassino"), true);
string[] zumba=string_split(mensagem, bell, false);
//string m=mensagem;
string m=zumba[1];
if(tradutorativo==1&&parsed[0]!=un){
gtc.selecionar_linguagem_origem(idiomachat);
gtc.selecionar_linguagem_destino(idiomaorigem);
string pa=gtc.traduzir(m);
if(pa!="")m=pa;
gtc.selecionar_linguagem_origem(idiomaorigem);
gtc.selecionar_linguagem_destino(idiomachat);
}
m=ndicionario(m);
add_add_item("chats", zumba[0]+m);
}
else if(event.type==event_receive and event.channel==2 and add_active("variado")==1&&event.peer_id==peer_id)
{
add_add_item("variado",pegar_mensagem());
}
else if(event.type==event_receive&&event.channel==3&&event.peer_id==peer_id){
string[] parsed=string_split(pegar_mensagem(), " ", false);
if(ouvirmortes==1||parsed.find(un)>-1||string_contains(string_to_lower_case(pegar_mensagem()), string_to_lower_case(un), 1)>-1){
p.play_stationary("notifykills.ogg",false);
if(parsed[0]=="msgmortanaarena"){
string m=parsed[1]+" "+pu.get_value("foi morta na arena por")+" "+parsed[2];
add_add_item("variado", m);
}
else if(parsed[0]=="msg2"){
string m;
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" ", "", false);
string[] b=string_split(a, ";", false);
for(uint i=0;i<b.length();i++){
m+=pu.get_value(b[i]);
}
add_add_item("variado", m);
}
else if(parsed[0]=="msgmorreuqueimada"){
string m=parsed[1]+" "+pu.get_value("morreu queimada!");
add_add_item("mortes", m);
}
else if(parsed[0]=="msgmorreuqueimado"){
string m=parsed[1]+" "+pu.get_value("morreu queimado!");
}
else if(parsed[0]=="msgcongelada"){
string m=parsed[1]+" "+pu.get_value("morreu congelada!");
add_add_item("mortes", m);
}
else if(parsed[0]=="msgcongelado"){
string m=parsed[1]+" "+pu.get_value("morreu congelado!");
add_add_item("mortes", m);
}
else if(parsed[0]=="msgbombarelogio"){
string m=pu.get_value("O tempo acabou, e")+" "+parsed[1]+" "+pu.get_value("se estourou na bomba relógio de")+" "+parsed[2]+".";
add_add_item("mortes", m);
}
else if(parsed[0]=="msgmaxbomba"){
string m=parsed[1]+" "+pu.get_value("não teve a mínima chance de sobreviver à maxbomba de")+" "+parsed[2]+"!";
add_add_item("mortes", m);
}
else if(parsed[0]=="msgbombaatomicam"){
string m=parsed[1]+" "+pu.get_value("foi multilada em massa pela destruição causada por")+" "+parsed[2]+"!";
add_add_item("mortes", m);
}
else if(parsed[0]=="msgbombaatomicah"){
string m=parsed[1]+" "+pu.get_value("foi multilado em massa pela destruição causada por")+" "+parsed[2]+"!";
add_add_item("mortes", m);
}
else if(parsed[0]=="msgmaxbomba"){
string m=parsed[1]+" "+pu.get_value("Não teve a mínima chance contra a max_bomba de")+" "+parsed[2]+".";
add_add_item("variado", m);
}
else if(parsed[0]=="msga"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" "+parsed[1]+" ", "", true);
a=string_replace(a, parsed[parsed.length()-1], "", false);
string m=parsed[1]+" "+pu.get_value(a)+" "+parsed[parsed.length()-1];
add_add_item("variado", m);
}
else if(parsed[0]=="msgnormal"){
string a=pegar_mensagem();
a=string_replace(a, parsed[0]+" "+parsed[1]+" ", "", true);
string m=parsed[1]+" "+pu.get_value(a);
add_add_item("variado", m);
}
else if(parsed[0]=="msgmortonaarena"){
string m=parsed[1]+" "+pu.get_value("foi morto na arena por")+" "+parsed[2];
add_add_item("variado", m);
}
else if(parsed[0]=="msgvocêémuitofraco"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+parsed[2]+", "+pu.get_value("você é muito fraco. Vá treinar!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgvocêémuitofraca"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+parsed[2]+", "+pu.get_value("você é muito fraca. Vá treinar!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgparabaixodaterra"){
string m=parsed[1]+" "+pu.get_value("acabou de mandar")+" "+parsed[2]+" "+pu.get_value("para baixo da terra!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgtantoqueomatou"){
string m=parsed[1]+" "+pu.get_value("bateu tanto em")+" "+parsed[2]+" "+pu.get_value("que o matou!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgtantoqueamatou"){
string m=parsed[1]+" "+pu.get_value("bateu tanto em")+" "+parsed[2]+" "+pu.get_value("que a matou!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgsenãoestivessemorto"){
string m=parsed[2]+" "+pu.get_value("ficaria com muita raiva de")+" "+parsed[1]+"... "+pu.get_value("Se não estivesse morto!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgsenãoestivessemorta"){
string m=parsed[2]+" "+pu.get_value("ficaria com muita raiva de")+" "+parsed[1]+"... "+pu.get_value("Se não estivesse morta!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgdeixoumatala"){
string m=parsed[2]+" "+pu.get_value("deixou")+" "+parsed[1]+" "+pu.get_value("matá-la! Eu não deixava...");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgdeixoumatalo"){
string m=parsed[2]+" "+pu.get_value("deixou")+" "+parsed[1]+" "+pu.get_value("matá-lo! Eu não deixava...");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgolhalogopraquem"){
string m=pu.get_value("Olha logo pra quem")+" "+parsed[1]+" "+pu.get_value("foi morrer? Pra")+" "+parsed[2]+"! "+pu.get_value("Essa é boa!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgtodasuja"){
string m=parsed[1]+" "+pu.get_value("está toda suja com o sangue de")+" "+parsed[2]+"... "+pu.get_value("Eca!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgtodosujo"){
string m=parsed[1]+" "+pu.get_value("está todo sujo com o sangue de")+" "+parsed[2]+"... "+pu.get_value("Eca!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgdapróximavezvenhacommaisgente"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+parsed[2]+", "+pu.get_value("da próxima vez venha com mais gente!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgnãovenhatomarmeutempo"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+pu.get_value("Poxa")+" "+parsed[2]+", "+pu.get_value("não venha tomar meu tempo de novo, pois nem graça matar você tem!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgeraumavez"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+pu.get_value("Era uma vez,")+", "+parsed[2]+". "+pu.get_value("Até mais!");
add_add_item("mortes",m);
}
else if(parsed[0]=="msgmatarmosquito"){
string m=parsed[1]+" "+pu.get_value("Grita:")+" "+pu.get_value("Nossa, matar mosquito é mais difícil que matar você")+", "+parsed[2]+".";
add_add_item("mortes",m);
}
}
}
}
void game()
{
load_map(mapainicial);
send_reliable(peer_id, "setvoice "+voice, 0);
if(ouvirhits==0)send_reliable(peer_id, "hits", 0);
send_reliable(peer_id, "idiomachat "+idiomachat, 0);
if(ouvirpassos==0)send_reliable(peer_id, "dpassos", 0);
temponaoevoce.restart();
if(mdor==0)send_reliable(peer_id, "ndor", 0);
if(avisanivel==0)send_reliable(peer_id, "nnivel", 0);
connected=true;
send_reliable(peer_id, "getversion", 0);
while(true){
wait(5);
if(nandar>-1){
int id=p.play_stationary("elevador.ogg", true);
int d=-1;
timer t;
moveable=false;
while(true){
wait(5);
mainloop();
if(t.elapsed>=100){
t.restart();
d=(me.y/20);
if(nandar==0)d=me.y;
if(d>nandar){
me.y--;
send_reliable(peer_id, "move "+me.x+" "+me.y, 0);
}
else if(d<nandar){
me.y++;
send_reliable(peer_id, "move "+me.x+" "+me.y, 0);
}
d=(me.y/20);
if(nandar==0)d=me.y;
if(d==nandar||mapname=="túnel"){
nandar=-1;
if(!ausente)moveable=true;
p.destroy_sound(id);
if(mapname=="túnel"){
me.x=1;
me.y=0;
send_reliable(peer_id, "move "+me.x+" "+me.y, 0);
}
break;
}
}
}
}
if(lan.nalancha==1)lan.loop();
if(tbonus.elapsed>0){
if(tbonus.elapsed>=30000){
tbonus.force(0);
tbonus.pause();
rtudobonus();
dlgplay("caiu_água.ogg");
send_reliable(peer_id, "vbonus", 0);
}
if(tbonus2.elapsed>=random(500, 800)){
tbonus2.restart();
cbonus(random(1, 16));
}
}
mainloop();
if(connected&&temponaoevoce.elapsed>=2000){
if(itensbonus.length()>0)bonusloop();
if(maquinatempos.length()>0)maquinatempoloop();
if(objs.length()>0)objsloop();
if(studo==1)checkitem();
if(ambientes.length()>0)ambientecheckloop();
if(staircases.length()>0)staircasecheckloop();
if(doors.length()>0)doorcheckloop();
if(elevadors.length()>0)elevadorloop();
localloop();
if(areia_movedissas.length()>0)areia_movedissaloop();
weaponcheckloop();
secundario();
if(gmt()!=""&&jumping==0&&pulou==1&&falling==false) pulou=0;
}
if(key_pressed(KEY_F9)&&desenvolvedordm==1){
int slot=-1;
setupmenu();
m.add_item_tts(pu.get_value("Zona"), "zona");
m.add_item_tts(pu.get_value("Zona protegida"), "zona2");
m.add_item_tts(pu.get_value("Ambiente"), "ambiente");
m.add_item_tts(pu.get_value("Plataforma"), "plataforma");
m.add_item_tts(pu.get_value("Escada"), "escada");
m.add_item_tts(pu.get_value("barreira"), "barreira");
m.add_item_tts(pu.get_value("Passagem"), "passagem");
m.add_item_tts(pu.get_value("Elevador"), "elevador");
m.add_item_tts(pu.get_value("Congelar"), "congelar");
m.add_item_tts(pu.get_value("Areia movediça"), "areia");
m.add_item_tts(pu.get_value("Desfazer última produção"), "desfazer");
int mres=m.run(pu.get_value("Selecione o que deseja fazer"), true);
if(m.get_item_name(mres)=="zona"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada y");
string s5=v.input("Texto à colocar");
if(s1!=""&&s2!=""&&s3!=""&&s4!=""&&s5!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("zone:"+s1+":"+s2+":"+s3+":"+s4+":"+s5);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
if(m.get_item_name(mres)=="desfazer"){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
else if(m.get_item_name(mres)=="plataforma"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Altura da plataforma");
string s4;
pack_file pa;
pa.open("sounds.dat");
string[] lista=pa.list_files();
string[] plataformas;
for(uint i=0;i<lista.length();i++){
if(string_contains(lista[i], "step1", 1)>-1)plataformas.insert_last(lista[i]);
}
int marcado=0;
while(true){
wait(5);
mainloop();
if(key_pressed(KEY_ESCAPE)){
s4="";
break;
}
if(key_pressed(KEY_UP)&&marcado>0){
marcado--;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_DOWN)&&marcado<plataformas.length()-1){
marcado++;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_RETURN)){
s4=plataformas[marcado];
break;
}
if(key_pressed(KEY_SPACE)){
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
}
if(s1!=""&&s2!=""&&s3!=""&&s4!=""){
s4=string_replace(s4, "step1.ogg", "", false);
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("platform:"+s1+":"+s2+":"+s3+":"+s4);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="areia"){
string s1=v.input("Coordenada X");
string s2=v.input("Coordenada Y");
if(s1!=""&&s2!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("areia_movediça:"+s1+":"+s2);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="congelar"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada Y");
if(s1!=""&&s2!=""&&s3!=""&&s4!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("congelar:"+s1+":"+s2+":"+s3+":"+s4);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="passagem"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada Y");
string s5=v.input("Coordenada X de destino");
string s6=v.input("Coordenada Y de destino");
string s7=v.input("Nome do mapa de destino");
string s8=v.input("Mensagem exibida ao chegar no mapa");
if(s1!=""&&s2!=""&&s3!=""&&s4!=""&&s5!=""&&s6!=""&&s7!=""&&s8!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("travelpoint:"+s1+":"+s2+":"+s3+":"+s4+":"+s5+":"+s6+":"+s7+":"+s8);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="elevador"){
string s1=v.input("Coordenada X onde o elevador começa");
string s2=v.input("Coordenada Y onde o elevador vai começar");
string s3=v.input("Coordenada X onde o elevador irá chegar");
string s4=v.input("Coordenada Y onde o elevador irá chegar");
if(s1!=""&&s2!=""&&s3!=""&&s4!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("elevador:"+s1+":"+s2+":"+s3+":"+s4);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="zona2"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada Y");
if(s1!=""&&s2!=""&&s3!=""&&s4!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("safezone:"+s1+":"+s2+":"+s3+":"+s4);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="escada"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada Y");
string s5;
pack_file pa;
pa.open("sounds.dat");
string[] lista=pa.list_files();
string[] plataformas;
for(uint i=0;i<lista.length();i++){
if(string_contains(lista[i], "step1", 1)>-1)plataformas.insert_last(lista[i]);
}
int marcado=0;
while(true){
wait(5);
mainloop();
if(key_pressed(KEY_ESCAPE)){
s5="";
break;
}
if(key_pressed(KEY_UP)&&marcado>0){
marcado--;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_DOWN)&&marcado<plataformas.length()-1){
marcado++;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_RETURN)){
s5=plataformas[marcado];
break;
}
if(key_pressed(KEY_SPACE)){
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
}
if(s1!=""&&s2!=""&&s3!=""&&s4!=""&&s5!=""){
s5=string_replace(s5, "step1.ogg", "", false);
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("staircase:"+s1+":"+s2+":"+s3+":"+s4+":"+s5);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="ambiente"){
string s1=v.input("Começo da coordenada X");
string s2=v.input("Fim da coordenada X");
string s3=v.input("Começo da coordenada Y");
string s4=v.input("Fim da coordenada Y");
string s5;
string[] plataformas;
plataformas.insert_last("a1.ogg");
plataformas.insert_last("a2.ogg");
plataformas.insert_last("a3.ogg");
plataformas.insert_last("a4.ogg");
plataformas.insert_last("a5.ogg");
plataformas.insert_last("a6.ogg");
plataformas.insert_last("a7.ogg");
plataformas.insert_last("a8.ogg");
plataformas.insert_last("a9.ogg");
plataformas.insert_last("a10.ogg");
plataformas.insert_last("a11.ogg");
plataformas.insert_last("a12.ogg");
plataformas.insert_last("a13.ogg");
plataformas.insert_last("a14.ogg");
plataformas.insert_last("a15.ogg");
plataformas.insert_last("a16.ogg");
plataformas.insert_last("a17.ogg");
plataformas.insert_last("a18.ogg");
plataformas.insert_last("a19.ogg");
plataformas.insert_last("amb1.ogg");
plataformas.insert_last("avião1.ogg");
plataformas.insert_last("avião2.ogg");
plataformas.insert_last("avião3.ogg");
plataformas.insert_last("aviaointerno.ogg");
plataformas.insert_last("aviaoloop.ogg");
plataformas.insert_last("baixodagua.ogg");
plataformas.insert_last("barcomovendo.ogg");
plataformas.insert_last("basquete.ogg");
plataformas.insert_last("bertalina.ogg");
plataformas.insert_last("bighall.ogg");
plataformas.insert_last("birds.ogg");
plataformas.insert_last("birds1.ogg");
plataformas.insert_last("birds2.ogg");
plataformas.insert_last("birds3.ogg");
plataformas.insert_last("birds4.ogg");
plataformas.insert_last("birds5.ogg");
plataformas.insert_last("birds6.ogg");
plataformas.insert_last("birds7.ogg");
plataformas.insert_last("birds8.ogg");
plataformas.insert_last("birds9.ogg");
plataformas.insert_last("birds10.ogg");
plataformas.insert_last("birds11.ogg");
plataformas.insert_last("birds12.ogg");
plataformas.insert_last("birds13.ogg");
plataformas.insert_last("birds14.ogg");
plataformas.insert_last("birds15.ogg");
plataformas.insert_last("birds16.ogg");
plataformas.insert_last("birds17.ogg");
plataformas.insert_last("birds22.ogg");
plataformas.insert_last("birds23.ogg");
plataformas.insert_last("birds24.ogg");
plataformas.insert_last("brejo-dia.ogg");
plataformas.insert_last("brejo-noite.ogg");
plataformas.insert_last("brejo.ogg");
plataformas.insert_last("cachoeira.ogg");
plataformas.insert_last("calm.ogg");
plataformas.insert_last("car1.ogg");
plataformas.insert_last("car2.ogg");
plataformas.insert_last("cassino.ogg");
plataformas.insert_last("cassino1.ogg");
plataformas.insert_last("cassino2.ogg");
plataformas.insert_last("cassino3.ogg");
plataformas.insert_last("cassino4.ogg");
plataformas.insert_last("caverna2.ogg");
plataformas.insert_last("cemiterio.ogg");
plataformas.insert_last("cerca_elétrica.ogg");
plataformas.insert_last("chuva.ogg");
plataformas.insert_last("cidade.ogg");
plataformas.insert_last("cidade1.ogg");
plataformas.insert_last("cidade_medieval");
plataformas.insert_last("clock1.ogg");
plataformas.insert_last("clock2.ogg");
plataformas.insert_last("cruzamento.ogg");
plataformas.insert_last("desktop1.ogg");
plataformas.insert_last("desktop2.ogg");
plataformas.insert_last("desktop3.ogg");
plataformas.insert_last("escola1.ogg");
plataformas.insert_last("escola2.ogg");
plataformas.insert_last("escola3.ogg");
plataformas.insert_last("fire.ogg");
plataformas.insert_last("fire1.ogg");
plataformas.insert_last("firecrackers.ogg");
plataformas.insert_last("flies.ogg");
plataformas.insert_last("floresta-dia.ogg");
plataformas.insert_last("floresta-noite.ogg");
plataformas.insert_last("floresta2.ogg");
plataformas.insert_last("fonteagua.ogg");
plataformas.insert_last("forest.ogg");
plataformas.insert_last("fridge.ogg");
plataformas.insert_last("fridge2.ogg");
plataformas.insert_last("geradorloop.ogg");
plataformas.insert_last("heavywater.ogg");
plataformas.insert_last("helicopteroloop.ogg");
plataformas.insert_last("hospital1.ogg");
plataformas.insert_last("hospital2.ogg");
plataformas.insert_last("hospital3.ogg");
plataformas.insert_last("hum.ogg");
plataformas.insert_last("igreja.ogg");
plataformas.insert_last("igreja2.ogg");
plataformas.insert_last("lake.ogg");
plataformas.insert_last("lanchonete.ogg");
plataformas.insert_last("lanchonete1.ogg");
plataformas.insert_last("laptop1.ogg");
plataformas.insert_last("mergulhando.ogg");
plataformas.insert_last("montanha.ogg");
plataformas.insert_last("mountain.ogg");
plataformas.insert_last("musica1.ogg");
plataformas.insert_last("musica2.ogg");
plataformas.insert_last("musica3.ogg");
plataformas.insert_last("musica4.ogg");
plataformas.insert_last("musica5.ogg");
plataformas.insert_last("musica6.ogg");
plataformas.insert_last("musica7.ogg");
plataformas.insert_last("musica8.ogg");
plataformas.insert_last("musica9.ogg");
plataformas.insert_last("musica10.ogg");
plataformas.insert_last("musica11.ogg");
plataformas.insert_last("musica12.ogg");
plataformas.insert_last("musica13.ogg");
plataformas.insert_last("musica14.ogg");
plataformas.insert_last("musica15.ogg");
plataformas.insert_last("musica16.ogg");
plataformas.insert_last("musicacassino.ogg");
plataformas.insert_last("musica_natal1.ogg");
plataformas.insert_last("musica_natal2.ogg");
plataformas.insert_last("night.ogg");
plataformas.insert_last("night2.ogg");
plataformas.insert_last("oceano1.ogg");
plataformas.insert_last("oceano2.ogg");
plataformas.insert_last("oceano3.ogg");
plataformas.insert_last("oceano4.ogg");
plataformas.insert_last("office.ogg");
plataformas.insert_last("park.ogg");
plataformas.insert_last("pessoas.ogg");
plataformas.insert_last("pessoas2.ogg");
plataformas.insert_last("radio.ogg");
plataformas.insert_last("rain1.ogg");
plataformas.insert_last("rain2.ogg");
plataformas.insert_last("rain3.ogg");
plataformas.insert_last("rain4.ogg");
plataformas.insert_last("restaurant.ogg");
plataformas.insert_last("rumble.ogg");
plataformas.insert_last("rumble2.ogg");
plataformas.insert_last("telhado.ogg");
plataformas.insert_last("telha1.ogg");
plataformas.insert_last("torcida.ogg");
plataformas.insert_last("torcida1.ogg");
plataformas.insert_last("torcida2.ogg");
plataformas.insert_last("torcida3.ogg");
plataformas.insert_last("traffic.ogg");
plataformas.insert_last("transito1.ogg");
plataformas.insert_last("transito2.ogg");
plataformas.insert_last("trem.ogg");
plataformas.insert_last("trem2.ogg");
plataformas.insert_last("trem3.ogg");
plataformas.insert_last("tremchuva.ogg");
plataformas.insert_last("truck.ogg");
plataformas.insert_last("vent.ogg");
plataformas.insert_last("vento.ogg");
plataformas.insert_last("water1.ogg");
plataformas.insert_last("water2.ogg");
plataformas.insert_last("water3.ogg");
plataformas.insert_last("water4.ogg");
plataformas.insert_last("water5.ogg");
plataformas.insert_last("water6.ogg");
plataformas.insert_last("wind1.ogg");
plataformas.insert_last("wind2.ogg");
plataformas.insert_last("winter.ogg");
int marcado=0;
while(true){
wait(5);
mainloop();
if(key_pressed(KEY_ESCAPE)){
s5="";
break;
}
if(key_pressed(KEY_UP)&&marcado>0){
marcado--;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_DOWN)&&marcado<plataformas.length()-1){
marcado++;
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_RETURN)){
s5=plataformas[marcado];
break;
}
if(key_pressed(KEY_SPACE)){
p.destroy_sound(slot);
slot=p.play_stationary(plataformas[marcado], false);
}
}
if(s1!=""&&s2!=""&&s3!=""&&s4!=""&&s5!=""){
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("sound_source:"+s1+":"+s2+":"+s3+":"+s4+":"+s5);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
else if(m.get_item_name(mres)=="barreira"){
string s1=v.input("Coordenada X");
string s2=v.input("Começo da altura");
string s3=v.input("Altura final da plataforma");
string s4;
pack_file pa;
pa.open("sounds.dat");
string[] lista=pa.list_files();
string[] plataformas;
for(uint i=0;i<lista.length();i++){
if(string_contains(lista[i], "wall", 1)>-1)plataformas.insert_last(lista[i]);
}
int marcado=0;
while(true){
wait(5);
mainloop();
if(key_pressed(KEY_ESCAPE)){
s4="";
break;
}
if(key_pressed(KEY_UP)&&marcado>0){
marcado--;
p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_DOWN)&&marcado<plataformas.length()-1){
marcado++;
p.play_stationary(plataformas[marcado], false);
}
if(key_pressed(KEY_RETURN)){
s4=plataformas[marcado];
break;
}
if(key_pressed(KEY_SPACE))p.play_stationary(plataformas[marcado], false);
}
if(s1!=""&&s2!=""&&s3!=""&&s4!=""){
s4=string_replace(s4, ".ogg", "", false);
string[] mapa=map2;
mapa.remove_at(mapa.length()-1);
mapa.remove_at(mapa.length()-1);
mapa.insert_last("wall:"+s1+":"+s2+":"+s3+":"+s4);
send_reliable(peer_id, "/rawdata "+linear(mapa), 1);
}
}
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_W)&&!key_down(KEY_F)||key_down(KEY_LSHIFT)&&key_pressed(KEY_W)&&!key_down(KEY_F))send_reliable(peer_id, "nv", 0);
if(key_pressed(KEY_M))send_reliable(peer_id, "r", 0);
if(key_pressed(KEY_Z)&&nolhar!=""){
nolhar="";
moveable=true;
send_reliable(peer_id, "volhar", 0);
}
if(key_pressed(KEY_D)&&desenvolvedordm==1){
string msg=v.input(pu.get_value("Digite sua mensagem."));
if(msg!="")send_reliable(peer_id, "adm "+msg, 0);
}
if(key_pressed(KEY_E)&&key_down(KEY_G)==false&&!key_down(KEY_F)){
if(tenter.elapsed>=2500||mapname=="mina_de_ouro"&&tenter.elapsed>=410){
tenter.restart();
send_reliable(peer_id, "imenu", 0);
}
}
if(key_down(KEY_LSHIFT)&&key_pressed(KEY_R)||key_down(KEY_RSHIFT)&&key_pressed(KEY_R)){
if(moveable&&!ausente&&carregartimer.elapsed>=carregartime&&!key_down(KEY_F)){
carregartimer.restart();
if(weapon==3&&shotgun_carregada>0){
shotgun_carregada=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==31&&mp7_carregada>0){
mp7_carregada=0;
p.play_stationary("descarregar_9mm.ogg", false);
send_reliable(peer_id, "draw descarregar_9mm.ogg", 0);
}
if(weapon==32&&m16_carregada>0){
m16_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==4&&glock_carregada>0){
glock_carregada=0;
p.play_stationary("descarregar_9mm.ogg", false);
send_reliable(peer_id, "draw descarregar_9mm.ogg", 0);
}
else if(weapon==5&&desert_carregada>0){
desert_carregada=0;
p.play_stationary("descarregar_9mm.ogg", false);
send_reliable(peer_id, "draw descarregar_9mm.ogg", 0);
}
else if(weapon==6){
if(arco_carregado>0||arco_carregado2>0){
if(modoarco==0)arco_carregado=0;
else if(modoarco==1)arco_carregado2=0;
}
}
else if(weapon==7&&m14_carregada>0){
m14_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==8&&m240_carregada>0){
m240_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
else if(weapon==10&&rifle_carregado>0){
rifle_carregado=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==11&&benelli_carregada>0){
benelli_carregada=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==12&&ultralaser_carregada>0){
ultralaser_carregada=0;
p.play_stationary("descarregar_megalaser.ogg", false);
send_reliable(peer_id, "draw descarregar_megalaser.ogg", 0);
}
else if(weapon==13&&bazuca_carregada>0){
bazuca_carregada=0;
p.play_stationary("descarregar_bazuca.ogg", false);
send_reliable(peer_id, "draw descarregar_bazuca.ogg", 0);
}
else if(weapon==14&&granada_carregada>0){
granada_carregada=0;
p.play_stationary("descarregar_lançador_de_granadas.ogg", false);
send_reliable(peer_id, "draw descarregar_lançador_de_granadas.ogg", 0);
}
else if(weapon==15&&sniper_carregada>0){
sniper_carregada=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==16&&uzi_carregada>0){
uzi_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==17&&mp5_carregada>0){
mp5_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==18&&ar15_carregada>0){
ar15_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==19&&m60_carregada>0){
m60_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
else if(weapon==21&&remington_carregada>0){
remington_carregada=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==22&&doze_carregada>0){
doze_carregada=0;
p.play_stationary("descarregar_38.ogg", false);
send_reliable(peer_id, "draw descarregar_38.ogg", 0);
}
else if(weapon==23&&vulcan_carregada>0){
vulcan_carregada=0;
p.play_stationary("descarregar_vulcan.ogg", false);
send_reliable(peer_id, "draw descarregar_vulcan.ogg", 0);
}
else if(weapon==24&&m4a1_carregada>0){
m4a1_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==25&&m249_carregada>0){
m249_carregada=0;
p.play_stationary("descarregar_5.56.ogg", false);
send_reliable(peer_id, "draw descarregar_5.56.ogg", 0);
}
else if(weapon==26&&ak47_carregada>0){
ak47_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
else if(weapon==33&&sub_laser_carregada>0){
sub_laser_carregada=0;
p.play_stationary("descarregar_sublaser.ogg", false);
send_reliable(peer_id, "draw descarregar_sublaser.ogg", 0);
}
else if(weapon==36&&galil_carregada>0){
galil_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
else if(weapon==39&&mk1_carregada>0){
mk1_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
else if(weapon==38&&ak48_carregada>0){
ak48_carregada=0;
p.play_stationary("descarregar_7.62.ogg", false);
send_reliable(peer_id, "draw descarregar_7.62.ogg", 0);
}
}
}
if(key_down(KEY_F)&&moveable){
if(key_pressed(KEY_1)){
p.play_stationary("v"+voice+"ajuda1.ogg", false);
send_reliable(peer_id, "frasesbarra 1 v"+voice+"ajuda1.ogg", 0);
}
if(key_pressed(KEY_2)){
send_reliable(peer_id, "frasesbarra 2 v"+voice+"ajuda2.ogg", 0);
p.play_stationary("v"+voice+"ajuda2.ogg", false);
}
if(key_pressed(KEY_UP)){
send_reliable(peer_id, "frasesbarra 3 v"+voice+"vaimorrer1.ogg", 0);
p.play_stationary("v"+voice+"vaimorrer1.ogg", false);
}
if(key_pressed(KEY_DOWN)){
send_reliable(peer_id, "frasesbarra 4 v"+voice+"vaimorrer2.ogg", 0);
p.play_stationary("v"+voice+"vaimorrer2.ogg", false);
}
if(key_pressed(KEY_LEFT)){
p.play_stationary("v"+voice+"falei1.ogg", false);
send_reliable(peer_id, "frasesbarra 5 v"+voice+"falei1.ogg", 0);
}
if(key_pressed(KEY_RIGHT)){
p.play_stationary("v"+voice+"falei2.ogg", false);
send_reliable(peer_id, "frasesbarra 6 v"+voice+"falei2.ogg", 0);
}
if(key_pressed(KEY_S)){
p.play_stationary("v"+voice+"sim.ogg", false);
send_reliable(peer_id, "frasesbarra 7 v"+voice+"sim.ogg", 0);
}
if(key_pressed(KEY_N)){
int n=random(1, 2);
if(n==1){
p.play_stationary("v"+voice+"nao.ogg", false);
send_reliable(peer_id, "frasesbarra 8 v"+voice+"nao.ogg", 0);
}
else if(n==2){
p.play_stationary("v"+voice+"naoposso.ogg", false);
send_reliable(peer_id, "frasesbarra 9 v"+voice+"naoposso.ogg", 0);
}
}
if(key_pressed(KEY_O)){
send_reliable(peer_id, "frasesbarra 10 v"+voice+"ok.ogg", 0);
p.play_stationary("v"+voice+"ok.ogg", false);
}
}
if(key_down(KEY_LSHIFT)&&key_pressed(KEY_RETURN)||key_down(KEY_RSHIFT)&&key_pressed(KEY_RETURN)){
checkdesc();
checktxt();
}
if(key_pressed(KEY_GRAVE)&&moveable==true){
if(tempweap!=0&&tempweap!=27) tempweap=0;
else if(tempweap==0) tempweap=27;
else if(tempweap==27){
if(inv_item_exists("taser")) tempweap=26;
else tempweap=0;
}
else if(tempweap==26) tempweap=0;
}
if(!key_down(KEY_F)){
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_1)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_1)&&moveable){
f1=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_2)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_2)&&moveable){
f2=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_3)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_3)&&moveable){
f3=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_4)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_4)&&moveable){
f4=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_5)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_5)&&moveable){
f5=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_6)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_6)&&moveable){
f6=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_7)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_7)&&moveable){
f7=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_8)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_8)&&moveable){
f8=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_9)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_9)&&moveable){
f9=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_0)&&moveable||key_down(KEY_LSHIFT)&&key_pressed(KEY_0)&&moveable){
f0=tempweap;
send_reliable(peer_id, "draw armafavorita.ogg", 0);
}
if(key_pressed(KEY_1)&&moveable&&tempweap!=f1)tempweap=f1;
if(key_pressed(KEY_2)&&moveable&&tempweap!=f2)tempweap=f2;
if(key_pressed(KEY_3)&&moveable&&tempweap!=f3)tempweap=f3;
if(key_pressed(KEY_4)&&moveable&&tempweap!=f4)tempweap=f4;
if(key_pressed(KEY_5)&&moveable&&tempweap!=f5)tempweap=f5;
if(key_pressed(KEY_6)&&moveable&&tempweap!=f6)tempweap=f6;
if(key_pressed(KEY_7)&&moveable&&tempweap!=f7)tempweap=f7;
if(key_pressed(KEY_8)&&moveable&&tempweap!=f8)tempweap=f8;
if(key_pressed(KEY_9)&&moveable&&tempweap!=f9)tempweap=f9;
if(key_pressed(KEY_0)&&moveable&&tempweap!=f0)tempweap=f0;
}
if(key_down(KEY_LSHIFT)&&key_pressed(KEY_C)||key_down(KEY_RSHIFT)&&key_pressed(KEY_C)) copiar();
if(key_pressed(KEY_P))
{
send_reliable(peer_id,"/vestindo",0);
}
if(key_down(KEY_G)&&key_pressed(KEY_R)&&dcamera==0&&moveable==true)
{
playcamera();
string what;
for (uint i=0; i<players.length(); i++)
{
if (players[i].x==camera.x and players[i].y==camera.y and players[i].map==mapname&&players[i].beeping==1)
{
if (what=="") what+=players[i].charname;
else what+=", "+players[i].charname;
}
}
for (uint i=0; i<objs.length(); i++)
{
if (objs[i].x==camera.x and objs[i].y==camera.y)
{
string balinha=objs[i].item;
balinha=string_replace(balinha, "_rand", "", true);
if (what=="")
what+=pu.get_value(balinha);
else
what+=", "+pu.get_value(balinha);
}
}
if(gct()!=""){
if(dcoordenadas==0)speak(what+", "+camera.x+", "+camera.y);
else speak(what);
}
else{
if(dcoordenadas==0)speak(pu.get_value("ar")+" "+what+", "+camera.x+", "+camera.y);
else speak(pu.get_value("ar")+" "+what);
}
}
if(key_down(KEY_RSHIFT)&&key_pressed(KEY_X)||key_down(KEY_LSHIFT)&&key_pressed(KEY_X))
{
if(weapon==31){
if(inv_item_number("9mm")==0){
speak(pu.get_value("Nenhuma munição 9mm."));
}
else if(inv_item_number("9mm")==1){
speak(pu.get_value("Uma munição 9mm."));
}
else if(inv_item_number("9mm")==2){
speak(pu.get_value("Duas munições 9mm."));
}
else{
speak(inv_item_number("9mm")+" "+pu.get_value("munições 9mm."));
}
}
if(weapon==32){
if(inv_item_number("5.56mm")==0){
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1){
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2){
speak(pu.get_value("Duas munições 5.56mm."));
}
else{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if(weapon==36){
if(inv_item_number("7.62mm")==0){
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1){
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2){
speak(pu.get_value("Duas munições 7.62mm."));
}
else{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if(weapon==38){
if(inv_item_number("7.62mm")==0){
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1){
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2){
speak(pu.get_value("Duas munições 7.62mm."));
}
else{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if(weapon==39){
if(inv_item_number("7.62mm")==0){
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1){
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2){
speak(pu.get_value("Duas munições 7.62mm."));
}
else{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if(weapon==37){
if(inv_item_number("dardo")==0){
speak(pu.get_value("Nenhum")+" "+pu.get_value("dardo")+".");
}
else if(inv_item_number("dardo")==1){
speak(pu.get_value("Um")+" "+pu.get_value("dardo")+".");
}
else if(inv_item_number("dardo")==2){
speak(pu.get_value("Dois")+" "+pu.get_value("dardos")+".");
}
else{
speak(inv_item_number("dardo")+" "+pu.get_value("dardos")+".");
}
}
if (weapon==3)
{
if(inv_item_number("12mm")==0)
{
speak(pu.get_value("Nenhuma munição 12mm."));
}
else if(inv_item_number("12mm")==1)
{
speak(pu.get_value("Uma munição 12mm."));
}
else if(inv_item_number("12mm")==2)
{
speak(pu.get_value("Duas munições 12mm."));
}
else
{
speak(inv_item_number("12mm")+" "+pu.get_value("munições 12mm."));
}
}
if (weapon==4)
{
if(inv_item_number("9mm")==0)
{
speak(pu.get_value("Nenhuma munição 9mm."));
}
else if(inv_item_number("9mm")==1)
{
speak(pu.get_value("Uma munição 9mm."));
}
else if(inv_item_number("9mm")==2)
{
speak(pu.get_value("Duas munições 9mm."));
}
else
{
speak(inv_item_number("9mm")+" "+pu.get_value("munições 9mm."));
}
}
if (weapon==5)
{
if(inv_item_number("9mm")==0)
{
speak(pu.get_value("Nenhuma munição 9mm."));
}
else if(inv_item_number("9mm")==1)
{
speak(pu.get_value("Uma munição 9mm."));
}
else if(inv_item_number("9mm")==2)
{
speak(pu.get_value("Duas munições 9mm."));
}
else
{
speak(inv_item_number("9mm")+" "+pu.get_value("munições 9mm."));
}
}
if (weapon==6)
{
if(modoarco==0){
if(inv_item_number("flecha")==0)
{
speak(pu.get_value("Nenhuma flecha."));
}
if(inv_item_number("flecha")==1)
{
speak(pu.get_value("Uma flecha."));
}
if(inv_item_number("flecha")==2)
{
speak(pu.get_value("Duas flechas."));
}
if(inv_item_number("flecha")>2)
{
speak(inv_item_number("flecha")+" "+pu.get_value("flechas."));
}
}
else{
if(inv_item_number("flecha_envenenada")==0)
{
speak(pu.get_value("Nenhuma flecha envenenada."));
}
if(inv_item_number("flecha_envenenada")==1)
{
speak(pu.get_value("Uma flecha envenenada."));
}
if(inv_item_number("flecha_envenenada")==2)
{
speak(pu.get_value("Duas flechas envenenadas."));
}
if(inv_item_number("flecha_envenenada")>2)
{
speak(inv_item_number("flecha_envenenada")+" "+pu.get_value("flechas_envenenadas."));
}
}
}
if (weapon==7)
{
if(inv_item_number("5.56mm")==0)
{
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1)
{
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2)
{
speak(pu.get_value("Duas munições 5.56mm."));
}
else
{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if (weapon==8)
{
if(inv_item_number("7.62mm")==0)
{
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1)
{
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2)
{
speak(pu.get_value("Duas munições 7.62mm."));
}
else
{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if (weapon==9)
{
if(inv_item_number("granada")==1)
{
speak(pu.get_value("Uma granada."));
}
else if(inv_item_number("granada")==2)
{
speak(pu.get_value("Duas granadas."));
}
else
{
speak(inv_item_number("granada")+" "+pu.get_value("granadas."));
}
}
if (weapon==10)
{
if(inv_item_number("5.56mm")==0)
{
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1)
{
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2)
{
speak(pu.get_value("Duas munições 5.56mm."));
}
else
{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if (weapon==11)
{
if(inv_item_number("12mm")==0)
{
speak(pu.get_value("Nenhuma munição 12mm."));
}
else if(inv_item_number("12mm")==1)
{
speak(pu.get_value("Uma munição 12mm."));
}
else if(inv_item_number("12mm")==2)
{
speak(pu.get_value("Duas munições 12mm."));
}
else
{
speak(inv_item_number("12mm")+" "+pu.get_value("munições 12mm."));
}
}
if (weapon==12||weapon==33)
{
if(inv_item_number("laser")==0)
{
speak("Nenhum laser.");
}
else if(inv_item_number("laser")==1)
{
speak("Um laser.");
}
else if(inv_item_number("laser")==2)
{
speak("Dois lasers.");
}
else
{
speak(inv_item_number("laser")+" lasers.");
}
}
if (weapon==13)
{
if(inv_item_number("míssil")==0)
{
speak("Nenhum míssil.");
}
else if(inv_item_number("míssil")==1)
{
speak("Um míssil.");
}
else if(inv_item_number("míssil")==2)
{
speak("Dois míssils.");
}
else
{
speak(inv_item_number("míssil")+" Míssils.");
}
}
if (weapon==14)
{
if(inv_item_number("granada")==0)
{
speak("Nenhuma granada.");
}
if(inv_item_number("granada")==1)
{
speak("Uma granada.");
}
if(inv_item_number("granada")==2)
{
speak("Duas granadas.");
}
if(inv_item_number("granada")>2)
{
speak(inv_item_number("granada")+" granadas.");
}
}
if (weapon==15)
{
if(inv_item_number("7.62mm")==0)
{
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1)
{
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2)
{
speak(pu.get_value("Duas munições 7.62mm."));
}
else
{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if (weapon==16)
{
if(inv_item_number("9mm")==0)
{
speak(pu.get_value("Nenhuma munição 9mm."));
}
else if(inv_item_number("9mm")==1)
{
speak(pu.get_value("Uma munição 9mm."));
}
else if(inv_item_number("9mm")==2)
{
speak(pu.get_value("Duas munições 9mm."));
}
else
{
speak(inv_item_number("9mm")+" "+pu.get_value("munições 9mm."));
}
}
if (weapon==17)
{
if(inv_item_number("9mm")==0)
{
speak(pu.get_value("Nenhuma munição 9mm."));
}
else if(inv_item_number("9mm")==1)
{
speak(pu.get_value("Uma munição 9mm."));
}
else if(inv_item_number("9mm")==2)
{
speak(pu.get_value("Duas munições 9mm."));
}
else
{
speak(inv_item_number("9mm")+" "+pu.get_value("munições 9mm."));
}
}
if (weapon==18)
{
if(inv_item_number("5.56mm")==0)
{
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1)
{
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2)
{
speak(pu.get_value("Duas munições 5.56mm."));
}
else
{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if (weapon==19)
{
if(inv_item_number("7.62mm")==0)
{
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1)
{
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2)
{
speak(pu.get_value("Duas munições 7.62mm."));
}
else
{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if (weapon==21)
{
if(inv_item_number("30mm")==0)
{
speak(pu.get_value("Nenhuma munição 30mm."));
}
else if(inv_item_number("30mm")==1)
{
speak(pu.get_value("Uma munição 30mm."));
}
else if(inv_item_number("30mm")==2)
{
speak("Duas munições 30mm");
}
else
{
speak(inv_item_number("30mm")+" munições 30mm");
}
}
if (weapon==22)
{
if(inv_item_number("12mm")==0)
{
speak(pu.get_value("Nenhuma munição 12mm."));
}
else if(inv_item_number("12mm")==1)
{
speak(pu.get_value("Uma munição 12mm."));
}
else if(inv_item_number("12mm")==2)
{
speak(pu.get_value("Duas munições 12mm."));
}
else
{
speak(inv_item_number("12mm")+" "+pu.get_value("munições 12mm."));
}
}
if (weapon==23)
{
if(inv_item_number("7.62mm")==0)
{
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1)
{
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2)
{
speak(pu.get_value("Duas munições 7.62mm."));
}
else
{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if (weapon==24)
{
if(inv_item_number("5.56mm")==0)
{
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1)
{
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2)
{
speak(pu.get_value("Duas munições 5.56mm."));
}
else
{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if (weapon==25)
{
if(inv_item_number("5.56mm")==0)
{
speak(pu.get_value("Nenhuma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==1)
{
speak(pu.get_value("Uma munição 5.56mm."));
}
else if(inv_item_number("5.56mm")==2)
{
speak(pu.get_value("Duas munições 5.56mm."));
}
else
{
speak(inv_item_number("5.56mm")+" "+pu.get_value("munições 5.56mm."));
}
}
if (weapon==26)
{
if(inv_item_number("7.62mm")==0)
{
speak(pu.get_value("Nenhuma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==1)
{
speak(pu.get_value("Uma munição 7.62mm."));
}
else if(inv_item_number("7.62mm")==2)
{
speak(pu.get_value("Duas munições 7.62mm."));
}
else
{
speak(inv_item_number("7.62mm")+" "+pu.get_value("munições 7.62mm."));
}
}
if(weapon==27){
if(tirostaser==0){
speak(pu.get_value("Taser descarregada."));
}
else if(tirostaser==1){
speak("1 "+pu.get_value("tiro para sua taser."));
}
else if(tirostaser==2){
speak("2 "+pu.get_value("tiros para sua taser."));
}
else{
speak(tirostaser+" "+pu.get_value("tiros para sua taser."));
}
}
}
if(key_pressed(KEY_X)){
if(weapon==3) speak(shotgun_carregada);
else if(weapon==31)speak(mp7_carregada);
else if(weapon==32)speak(m16_carregada);
else if(weapon==4)speak(glock_carregada);
else if(weapon==5)speak(desert_carregada);
else if(weapon==6){
if(modoarco==0)speak(arco_carregado);
else if(modoarco==1)speak(arco_carregado2);
}
else if(weapon==7)speak(m14_carregada);
else if(weapon==8)speak(m240_carregada);
else if(weapon==9)speak(inv_item_number("granada"));
else if(weapon==10)speak(rifle_carregado);
else if(weapon==11)speak(benelli_carregada);
else if(weapon==12)speak(ultralaser_carregada);
else if(weapon==13)speak(bazuca_carregada);
else if(weapon==14)speak(granada_carregada);
else if(weapon==15)speak(sniper_carregada);
else if(weapon==16)speak(uzi_carregada);
else if(weapon==17)speak(mp5_carregada);
else if(weapon==18)speak(ar15_carregada);
else if(weapon==19)speak(m60_carregada);
else if(weapon==21)speak(remington_carregada);
else if(weapon==22)speak(doze_carregada);
else if(weapon==23)speak(vulcan_carregada);
else if(weapon==24)speak(m4a1_carregada);
else if(weapon==25)speak(m249_carregada);
else if(weapon==26)speak(ak47_carregada);
else if(weapon==27)speak(tirostaser);
else if(weapon==38)speak(ak48_carregada);
else if(weapon==39)speak(mk1_carregada);
else if(weapon==33)speak(sub_laser_carregada);
else if(weapon==36)speak(galil_carregada);
else if(weapon==37){
if(mdardo==1)speak(dardo_carregado2);
else speak(dardo_carregado);
}
}
if(key_pressed(KEY_R) and carregando==0 && atirando==0&&novato==0&&moveable&&!ausente){
carregar();
}
if (dcheck==true)
{
doorcheck();
}
if (echeck==true)
{
elevadorcheck();
}
if (key_pressed(KEY_L)&&moveable==true){
checarlo();
}
if (key_pressed(KEY_SEMICOLON)&&moveable==true)
{
string sc=sociaismenu();
send_reliable(peer_id,"playsocial "+sc,0);
}
if(key_pressed(KEY_F10)) optionsmenu2();
if (key_pressed(KEY_U)&&key_down(KEY_RCONTROL)==false&&moveable==true||key_pressed(KEY_U)&&key_down(KEY_LCONTROL)==false&&moveable==true)
{
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT)) {
string multipot;
multipot=v.input(pu.get_value("Quantos")+" "+pu.get_value(bebendo)+" "+pu.get_value("você quer beber?"));
if (multipot!="" and string_to_number(multipot)>0)send_reliable(peer_id, "use"+bebendo+" "+multipot,0);
else speak(pu.get_value("Cancelado."));
}
else send_reliable(peer_id,"use"+bebendo+" 1",0);
}
if(key_pressed(KEY_Q)&&moveable&&jumping==0&&!ausente)centar();
if(key_pressed(KEY_W)&&moveable==true&&inv_item_number("varinha")>0&&dvarinha==0){
send_reliable(peer_id,"varinha",0);
}
if(key_pressed(KEY_T)&&modoatirartempo.elapsed>=modoatirar&&moveable)
{
if(weapon==6)
{
if(modoarco==0)
{
speak(pu.get_value("Modo veneno!"));
modoarco=1;
}
else if(modoarco==1)
{
speak(pu.get_value("Modo normal."));
modoarco=0;
}
}
if(weapon==37){
if(mdardo==0){
p.play_stationary("rajadaativada.ogg", false);
send_reliable(peer_id, "draw rajadaativada.ogg", 0);
mdardo=1;
}
else if(mdardo==1){
p.play_stationary("rajadadesativada.ogg", false);
send_reliable(peer_id, "draw rajadadesativada.ogg", 0);
mdardo=0;
}
}
if(weapon==38){
if(modoak48==0){
p.play_stationary("rajadaativada.ogg", false);
send_reliable(peer_id, "draw rajadaativada.ogg", 0);
modoak48=1;
}
else if(modoak48==1){
p.play_stationary("rajadadesativada.ogg", false);
send_reliable(peer_id, "draw rajadadesativada.ogg", 0);
modoak48=0;
}
}
if(weapon==11)
{
if(modobenelli==0)
{
speak(pu.get_value("Supressor ativado!"));
modobenelli=1;
send_reliable(peer_id,"carregar supressorbenelliligado.ogg",0);
}
else if(modobenelli==1)
{
speak(pu.get_value("Supressor desativado!"));
//p.play_stationary("supressorbenellidesligado.ogg", false);
send_reliable(peer_id,"carregar supressorbenellidesligado.ogg",0);
modobenelli=0;
}
}
if(weapon==23)
{
if(vulcanativa==0){
//p.play_stationary("vulcanativada.ogg", false);
vulcanativa=1;
send_reliable(peer_id, "carregar vulcanativada.ogg", 0);
}
else if(vulcanativa==1){
//p.play_stationary("vulcandesativada.ogg", false);
vulcanativa=0;
send_reliable(peer_id, "carregar vulcandesativada.ogg", 0);
}
}
if(weapon==24)
{
if(modom4a1==0)
{
speak(pu.get_value("Silenciador ativado!"));
modom4a1=1;
//p.play_stationary("supressorm4a1ligado.ogg", false);
send_reliable(peer_id,"carregar m4a1sligado.ogg",0);
}
else if(modom4a1==1)
{
speak(pu.get_value("Silenciador desativado!"));
//p.play_stationary("supressorm4a1desligado.ogg", false);
send_reliable(peer_id,"carregar m4a1sdesligado.ogg",0);
modom4a1=0;
}
}
if(weapon==25)
{
if(modom249==0)
{
speak(pu.get_value("Supressor ativado!"));
modom249=1;
//p.play_stationary("supressorm249ligado.ogg", false);
send_reliable(peer_id,"carregar supressorm249ligado.ogg",0);
}
else if(modom249==1)
{
speak(pu.get_value("Supressor desativado!"));
//p.play_stationary("supressorm249desligado.ogg", false);
send_reliable(peer_id,"carregar supressorm249desligado.ogg",0);
modom249=0;
}
}
if(weapon==26){
if(rak47==0){
rak47=1;
send_reliable(peer_id, "carregar rajadaativada.ogg", 0);
}
else{
rak47=0;
send_reliable(peer_id, "carregar rajadadesativada.ogg", 0);
}
}
if(weapon==18){
if(rar15==0){
rar15=1;
send_reliable(peer_id, "carregar rajadaativada.ogg", 0);
}
else{
rar15=0;
send_reliable(peer_id, "carregar rajadadesativada.ogg", 0);
}
}
if(weapon==36){
if(modogalil==0)
{
speak(pu.get_value("Silenciador ativado!"));
modogalil=1;
send_reliable(peer_id,"carregar m4a1sligado.ogg",0);
}
else if(modogalil==1)
{
speak(pu.get_value("Silenciador desativado!"));
send_reliable(peer_id,"carregar m4a1sdesligado.ogg",0);
modogalil=0;
}
}
if(weapon==16)
{
if(modouzi==0)
{
speak(pu.get_value("Supressor ativado!"));
modouzi=1;
//p.play_stationary("supressoruziligado.ogg", false);
send_reliable(peer_id,"carregar supressoruziligado.ogg",0);
}
else if(modouzi==1)
{
speak(pu.get_value("Supressor desativado!"));
//p.play_stationary("supressoruzidesligado.ogg", false);
send_reliable(peer_id,"carregar supressoruzidesligado.ogg",0);
modouzi=0;
}
}
}
if(key_pressed(KEY_I)&&moveable&&!ausente&&inv!=""&&temponaoevoce.elapsed>=600)invmenu(invcat[invcatpos]);
if (key_pressed(KEY_SPACE) and key_up(KEY_G)&&moveable)
{
if(bicicleta==1){
send_reliable(peer_id, "draw buzinabike.ogg", 0);
p.play_stationary("buzinabike.ogg", false);
}
else{
checkitem();
//send_reliable(peer_id,"enter2",0);
}
}
if (key_pressed(KEY_RETURN)&&moveable)
{
send_reliable(peer_id,"enter",0);
if(tenter.elapsed>=5000){
tenter.restart();
send_reliable(peer_id,"zsa "+get_zone_at(me.x, me.y),0);
}
checarenter();
dcheck=true;
echeck=true;
}
if (key_down(KEY_G)&&dcamera==0&&moveable==true)
{
if (key_pressed(KEY_C)&&dcoordenadas==0)
{
speak(camera.x+", "+camera.y);
}
if (key_pressed(KEY_LEFT)==false and kleft.pressing() and camera.x>0){
camera.x-=1;
playcamera();
if(string_contains(gct(),"wall",1)>-1) camera.x+=1;
}
if (key_pressed(KEY_RIGHT)==false and kright.pressing()&&camera.x<max.x){
camera.x+=1;
playcamera();
if(string_contains(gct(),"wall",1)>-1) camera.x-=1;
}
if (key_pressed(KEY_DOWN)==false and kdown.pressing() and camera.y>0)
{
camera.y-=1;
playcamera();
}
if (key_pressed(KEY_UP)==false and kup.pressing()&&camera.y<max.y)
{
camera.y+=1;
playcamera();
}
}
if (key_up(KEY_G)&&dcamera==0&&moveable==true)
{
camera.x=me.x;
camera.y=me.y;
}
if(key_up(KEY_LSHIFT)&&key_up(KEY_RSHIFT))
if (key_pressed(KEY_UP)&&jumping==0&&!falling&&key_up(KEY_G)&&canijumptimer.elapsed>50&&moveable&&!floating&&connected&&bicicleta==0&&!centado&&string_contains(get_tile_at(me.x, (me.y+1)), "wall", 1)<0){
sjumpcheck();
if(abletojump2>0&&dmoving==false)
{
jumptimer.restart();
p.play_stationary("jump.ogg",false);
jumping=1;
pulou=1;
ty1=me.y;
ty2=me.y+jumpheight;
ascending=true;
send_reliable(peer_id,"jump",0);
}
}
if (key_pressed(KEY_O))
{
if (playertrack=="")
{
speak(pu.get_value("Ninguém selecionado."));
}
else
{
int index=get_player(playertrack);
if (index>-1)
{
if(players[index].beeping==0) add_add_item("variado", pu.get_value("Este jogador não foi encontrado."));
else tell_where(players[index].x,players[index].y);
}
else
{
speak(pu.get_value("Este jogador não foi encontrado."));
}
}
}
if (key_down(KEY_LSHIFT)||key_down(KEY_RSHIFT))
{
if(key_pressed(KEY_UP) and facing!=Forward&&moveable==true)
{
facing=Forward;
//p.play_stationary("turn.ogg",false);
send_reliable(peer_id,"turn "+facing,0);
}
if(key_pressed(KEY_DOWN) and facing!=Back&&moveable==true)
{
facing=Back;
//p.play_stationary("turn.ogg",false);
send_reliable(peer_id,"turn "+facing,0);
}
if (key_pressed(KEY_LEFT) and facing!=Left&&moveable==true)
{
facing=Left;
//p.play_stationary("turn.ogg",false);
send_reliable(peer_id,"turn "+facing,0);
}
if (key_pressed(KEY_RIGHT) and facing!=Right&&moveable==true)
{
facing=Right;
//p.play_stationary("turn.ogg",false);
send_reliable(peer_id,"turn "+facing,0);
}
}
mouse_update();
if(key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
if (key_down(KEY_LCONTROL)&&carregartimer.elapsed>=carregartime and weapontimer.elapsed>=weapontime&&atirando==0&&carregando==0&&amisafe==false&&inansz==false&&star==false&&moveable==true||mouse_down(0)&&carregartimer.elapsed>=carregartime and weapontimer.elapsed>=weapontime&&atirando==0&&carregando==0&&amisafe==false&&inansz==false&&star==false&&moveable==true||key_down(KEY_RCONTROL)&&rcontrol==1&&carregartimer.elapsed>=carregartime&&weapontimer.elapsed>=weapontime&&atirando==0&&carregando==0&&amisafe==false&&inansz==false&&star==false&&moveable==true)
{
if(novato==0){
weapontimer.restart();
if(weapon==1)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
if (weapon==2)
{
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
atirando=1;
}
if (weapon==3)
{
if(shotgun_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
shotgun_carregada-=1;
}
else
{
atirando=1;
}
}
if (weapon==4)
{
if(glock_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
glock_carregada-=1;
}
else
{
atirando=1;
}
}
if (weapon==5)
{
if(desert_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
desert_carregada-=1;
}
else
{
p.play_stationary("descarregada_desert.ogg", false);
atirando=1;
}
}
if (weapon==6){
if(arco_carregado>0||arco_carregado2>0){
atirando=1;
if(modoarco==0){
if(arco_carregado2==1) add_add_item("variado", pu.get_value("A flecha colocada no arco não suporta esse modo!"));
else{
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
arco_carregado=0;
}
}
else if(modoarco==1){
if(arco_carregado2==0)add_add_item("variado", pu.get_value("A flecha colocada no arco não suporta esse modo!"));
else{
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
arco_carregado2=0;
}
}
}
else
{
p.play_stationary("descarregado_arco.ogg", false);
atirando=1;
}//fim do arco carregado
}//Fim do arco
if (weapon==7)
{
if(m14_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
m14_carregada-=1;
}
else
{
p.play_stationary("descarregada_m14.ogg", false);
atirando=1;
}
}
if (weapon==8)
{
if(m240_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
m240_carregada-=5;
}
else
{
p.play_stationary("descarregada_m240.ogg", false);
atirando=1;
}
}
if (weapon==9)
{
if(inv_item_exists("granada")){
atirando=1;
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
}
}
if (weapon==10)
{
if(rifle_carregado>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
rifle_carregado-=1;
}
else
{
p.play_stationary("descarregado_rifle.ogg", false);
atirando=1;
}
}
if (weapon==11)
{
if(benelli_carregada>0)
{
if(modobenelli==0){
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
benelli_carregada-=1;
}
else if(modobenelli==1){
atirando=1;
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
benelli_carregada-=1;
}
}
else
{
atirando=1;
p.play_stationary("descarregada_benelli.ogg", false);
}
}
if (weapon==12)
{
if(ultralaser_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
ultralaser_carregada-=1;
}
else
{
p.play_stationary("descarregada_ultralaser.ogg", false);
atirando=1;
}
}
if (weapon==13)
{
if(bazuca_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
bazuca_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_bazuca.ogg", false);
}
}
if (weapon==14)
{
if(granada_carregada>0)
{
atirando=1;
granada_carregada-=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
else
{
atirando=1;
p.play_stationary("descarregada_granada.ogg", false);
}
}
if (weapon==15)
{
if(sniper_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
sniper_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_sniper.ogg", false);
}
}
if (weapon==17)
{
if(mp5_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
mp5_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_mp5.ogg", false);
}
}
if (weapon==18)
{
if(ar15_carregada>0)
{
atirando=1;
if(rar15==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
ar15_carregada-=1;
}
else if(rar15==1&&ar15_carregada>=3){
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
ar15_carregada-=3;
}
}
else
{
atirando=1;
p.play_stationary("descarregada_ar15.ogg", false);
}
}
if (weapon==19)
{
if(m60_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
m60_carregada-=5;
}
else
{
atirando=1;
p.play_stationary("descarregada_m60.ogg", false);
}
}
if (weapon==20)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
if (weapon==21)
{
if(remington_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
remington_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_remington.ogg", false);
}
}
if (weapon==22)
{
if(doze_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
doze_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_doze.ogg", false);
}
}
if (weapon==23)
{
if(vulcanativa==1)
{
if(vulcan_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
vulcan_carregada-=10;
}
else
{
atirando=1;
p.play_stationary("descarregada_vulcan.ogg", false);
}
}
}
if (weapon==24)
{
if(m4a1_carregada>0)
{
atirando=1;
if(modom4a1==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
else{
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
}
m4a1_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_m4a1.ogg", false);
}
}
if (weapon==25)
{
if(m249_carregada>0)
{
atirando=1;
if(modom249==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
else{
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
}
m249_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_m249.ogg", false);
}
}
if (weapon==16)
{
if(uzi_carregada>0)
{
atirando=1;
if(modouzi==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
else{
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
}
uzi_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_uzi.ogg", false);
}
}
if (weapon==26)
{
if(ak47_carregada>0)
{
atirando=1;
if(rak47==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
ak47_carregada-=1;
}
else if(ak47_carregada>=5&&rak47==1){
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
ak47_carregada-=5;
}
}
else
{
atirando=1;
p.play_stationary("descarregada_ak47.ogg", false);
}
}
if (weapon==27&&tirostaser>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
tirostaser--;
}
if(weapon==28)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
if (weapon==29){
atirando=1;
send_reliable(peer_id, "a "+facing+" "+weapon, 0);
}
if (weapon==30){
atirando=1;
send_reliable(peer_id, "a "+facing+" "+weapon, 0);
}
if (weapon==31){
if(mp7_carregada>0){
atirando=1;
send_reliable(peer_id, "a "+facing+" "+weapon, 0);
mp7_carregada-=1;
}
else{
atirando=1;
p.play_stationary("descarregada_mp7.ogg", false);
}
}
if (weapon==32){
if(m16_carregada>0){
atirando=1;
send_reliable(peer_id, "a "+facing+" "+weapon, 0);
m16_carregada-=1;
}
else{
atirando=1;
p.play_stationary("descarregada_m16.ogg", false);
}
}
if (weapon==33)
{
if(sub_laser_carregada>0)
{
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
sub_laser_carregada-=1;
}
else
{
atirando=1;
p.play_stationary("descarregada_sublaser.ogg", false);
}
}
if (weapon==35){
if(inv_item_exists("extintor")){
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
}
}
if (weapon==36){
if(galil_carregada>0){
atirando=1;
if(modogalil==0){
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
p.play_stationary("galil.ogg", false);
}
else if(modogalil==1){
send_unreliable(peer_id,"a2 "+facing+" "+weapon, 0);
p.play_stationary("galils.ogg", false);
}
galil_carregada--;
}
else{
atirando=1;
p.play_stationary("descarregada_galil.ogg", false);
}
}
if (weapon==38){
if(ak48_carregada>0){
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
//p.play_stationary("galil.ogg", false);
ak48_carregada--;
}
else{
atirando=1;
p.play_stationary("descarregada_ak48.ogg", false);
}
}
if (weapon==39){
if(mk1_carregada>0){
atirando=1;
send_unreliable(peer_id,"a "+facing+" "+weapon, 0);
mk1_carregada--;
}
else{
atirando=1;
p.play_stationary("descarregada_mk1.ogg", false);
}
}
if (weapon==37){
if(dardo_carregado>0&&mdardo==0){
atirando=1;
send_reliable(0, "ld 1", 0);
dardo_carregado--;
}
else if(dardo_carregado2>0&&mdardo==1){
atirando=1;
send_reliable(0, "ld 2", 0);
dardo_carregado2--;
}
else{
atirando=1;
p.play_stationary("descarregadaglock.ogg", false);
}
}
if(weapon==34){
if(inv_item_exists("molotov")){
atirando=1;
send_reliable(peer_id, "a "+facing+" "+weapon, 0);
}
else{
atirando=1;
p.play_stationary("descarregada_mp7.ogg", false);
}
}
}
}
if (key_pressed(KEY_C)){
if(dcoordenadas==0||desenvolvedordm==1)speak(olhar_x+", "+olhar_y);
}
if (key_up(KEY_G)&&key_up(KEY_RSHIFT)&&key_up(KEY_LSHIFT)&&!key_down(KEY_F)){
if(key_down(KEY_LEFT)&&walktimer.elapsed>=walktime&&!centado&&mapname!="barco")
{
facing=Left;
string locate=get_zone_at(me.x,me.y);
if(weapon==23&&vulcanativa==1||mapname=="mundo_medieval"||locate=="Elevador."){
}
else if (abletomove()==true)
{
walktimer.restart();
if(string_contains(get_tile_at(me.x-5, me.y), "wall", 1)<0&&bicicleta==1&&inv_item_number("bicicleta")>0&&bicicletaativa==1){
bool tem=false;
for(uint i=1;i<5;i++){
if(string_contains(get_tile_at(me.x-i, me.y), "wall", 1)>-1)tem=true;
}
if(tem==false){
me.x-=5;
send_reliable(peer_id,"movebicicleta "+me.x+" "+me.y,0);
string ss=get_tile_at(me.x, me.y);
ss=string_replace(ss, "0", "", true);
ss=string_replace(ss, "1", "", true);
ss=string_replace(ss, "2", "", true);
ss=string_replace(ss, "3", "", true);
ss=string_replace(ss, "4", "", true);
ss=string_replace(ss, "5", "", true);
ss=string_replace(ss, "6", "", true);
ss=string_replace(ss, "7", "", true);
ss=string_replace(ss, "8", "", true);
ss=string_replace(ss, "9", "", true);
ss=string_replace(ss, "concrete", "concret", true);
ss=string_replace(ss, "deepsand", "areia", true);
ss=string_replace(ss, "sand", "areia", true);
ss=string_replace(ss, "cement", "concret", true);
ss=string_replace(ss, "gravel", "terra", true);
ss=string_replace(ss, "rocks", "terra", true);
ss=string_replace(ss, "calcada", "concret", true);
ss=string_replace(ss, "plank", "madeira", true);
ss=string_replace(ss, "wood", "madeira", true);
ss=string_replace(ss, "bridge", "madeira", true);
ss=string_replace(ss, "carpet", "madeira", true);
ss=string_replace(ss, "chair", "metal", true);
ss=string_replace(ss, "deck", "madeira", true);
ss=string_replace(ss, "shortgrass", "grama", true);
ss=string_replace(ss, "grass", "grama", true);
ss=string_replace(ss, "matos", "mato", true);
ss=string_replace(ss, "mud", "barro", true);
p2.play_stationary("bicicleta"+ss+".ogg", false);
}
}
else{
me.x-=1;
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
if (stepcheck(me.x)==true)
playstep();
echo=true;
echotimer.restart();
if(string_contains(get_tile_at(me.x, me.y), "mud", 1)>-1){
int vv=random(0, 1);
if(vv==1)me.x++;
}
}
}
}
if (key_down(KEY_RIGHT) and walktimer.elapsed>=walktime&&!centado&&mapname!="barco")
{
facing=Right;
string locate=get_zone_at(me.x,me.y);
if(weapon==23&&vulcanativa==1||mapname=="mundo_medieval"||locate=="Elevador."){
}
else if (abletomove()==true)
{
walktimer.restart();
if(string_contains(get_tile_at(me.x+5, me.y), "wall", 1)<0&&bicicleta==1&&inv_item_exists("bicicleta")&&bicicletaativa==1){
bool tem=false;
for(uint i=1;i<5;i++){
if(string_contains(get_tile_at(me.x+i, me.y), "wall", 1)>-1)tem=true;
}
if(tem==false){
me.x+=5;
send_reliable(peer_id,"movebicicleta "+me.x+" "+me.y,0);
string ss=get_tile_at(me.x, me.y);
ss=string_replace(ss, "0", "", true);
ss=string_replace(ss, "1", "", true);
ss=string_replace(ss, "2", "", true);
ss=string_replace(ss, "3", "", true);
ss=string_replace(ss, "4", "", true);
ss=string_replace(ss, "5", "", true);
ss=string_replace(ss, "6", "", true);
ss=string_replace(ss, "7", "", true);
ss=string_replace(ss, "8", "", true);
ss=string_replace(ss, "9", "", true);
ss=string_replace(ss, "concrete", "concret", true);
ss=string_replace(ss, "deepsand", "areia", true);
ss=string_replace(ss, "sand", "areia", true);
ss=string_replace(ss, "cement", "concret", true);
ss=string_replace(ss, "gravel", "terra", true);
ss=string_replace(ss, "rocks", "terra", true);
ss=string_replace(ss, "calcada", "concret", true);
ss=string_replace(ss, "plank", "madeira", true);
ss=string_replace(ss, "wood", "madeira", true);
ss=string_replace(ss, "bridge", "madeira", true);
ss=string_replace(ss, "carpet", "madeira", true);
ss=string_replace(ss, "chair", "metal", true);
ss=string_replace(ss, "deck", "madeira", true);
ss=string_replace(ss, "shortgrass", "grama", true);
ss=string_replace(ss, "grass", "grama", true);
ss=string_replace(ss, "matos", "mato", true);
ss=string_replace(ss, "mud", "barro", true);
p2.play_stationary("bicicleta"+ss+".ogg", false);
}
}
else{
me.x+=1;
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
if (stepcheck(me.x)==true)
playstep();
echo=true;
echotimer.restart();
if(string_contains(get_tile_at(me.x, me.y), "mud", 1)>-1){
int vv=random(0, 1);
if(vv==1)me.x--;
}
}
}
}
}
if(key_pressed(KEY_LEFT)&&mapname=="barco"){
facing=Left;
if(abletomove()){
me.x-=1;
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
if (stepcheck(me.x)==true)
playstep();
echo=true;
echotimer.restart();
}
}
if (key_pressed(KEY_RIGHT)&&mapname=="barco"){
facing=Right;
if(abletomove()){
me.x+=1;
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
if (stepcheck(me.x)==true)
playstep();
echo=true;
echotimer.restart();
}
}
if (key_pressed(KEY_B))
{
if (get_zone_at(me.x,me.y)!="")
{
string locate=get_zone_at(me.x,me.y);
if(locate!=".")speak(pu.get_value(locate));
}
else
{
speak(pu.get_value("Localização atual:")+" "+pu.get_value("Área para exploração")+" "+pu.get_value("de")+" "+pu.get_value(mapname));
}
}
if (key_pressed(KEY_S)) send_reliable(peer_id, "healthcheck", 0);
if(key_pressed(KEY_H))send_reliable(peer_id, "uitem r2", 0);
if (key_down(KEY_LMENU)&&jumping==0&&dveloz==0&&bicicleta==0||key_down(KEY_LMENU)&&jumping==0&&dveloz==0&&bicicletaativa==0)
{
walktime=runvelocidade;
}
else if (jumping==1)
{
walktime=jumpvelocidade;
}
else if(bicicleta==1&&inv_item_exists("bicicleta")&&jumping==0&&bicicletaativa==1) walktime=bicicletaveloc;
else if(jumping==0&&bicicleta==0&&dveloz==1)walktime=velo2;
else
{
walktime=walkvelocidade;
}
if(key_pressed(KEY_ESCAPE))
{
exitmenu();
}
}
}
void reset(){
ausente=false;
lan.nalancha=0;
dveloz=0;
desenvolvedordm=0;
nolhar="";
falhou=0;
pulou=0;
destroy_all_doors();
destroy_all_msounds();
destroy_all_elevadors();
bolhadear=false;
connected=false;
connect=false;
term=false;
exiting=false;
objs.resize(0);
players.resize(0);
star=false;
moveable=true;
floating=false;
jumpheight=5;
destroy_all_sources();
destroy_all_ambientes();
chuvatelhado.close();
carregandotaser.close();
novato=0;
map.resize(0);
destroy_all_staircases();
p.destroy_all();
p2.destroy_all();
pobjs.destroy_all();
pcomputador.destroy_all();
 minping=-1;
 maxping=0;
failedpings=0;
totalfailedpings=0;
pings=0;
lastping=0;
ping=false;
forcepinging=false;
pingtime=5000;
pingtime2=15000;
defpingtime=5000;
def2pingtime=5000;
peer_id=0;
inv="";
apartamentoinv="";
reset_all_forced_keys();
floating=false;
cloaked=false;
mapname="";
garbage_collect();
}
void checkloc()
{
if (get_zone_at(me.x,me.y)!="")
{
string locate=get_zone_at(me.x,me.y);
if (locate!=currentloc)
{
if (zonestatus==1)
if(locate!=".")speak(pu.get_value(locate));
currentloc=locate;
}
}
else
{
if (currentloc!="")
{
if (zonestatus==1)
speak(pu.get_value("Área para exploração."));
currentloc="";
}
}
}
void track_thing(int x, int y)
{
tracker.x=x;
tracker.y=y;
}
void tell_where(int x, int y)
{
if (me.x<=x)
{
godir="direita";
go=x-me.x;
}
else if (me.x>=x)
{
godir="esquerda";
go=me.x-x;
}
if (me.y<=y)
{
godir2="acima";
go2=y-me.y;
}
else if (me.y>=y)
{
godir2="abaixo";
go2=me.y-y;
}
speak(pu.get_value(godir)+" "+go+" "+pu.get_value("e")+" "+pu.get_value(godir2)+" "+go2);
}
bool stepcheck(double val)
{
return true;
}
bool movecheck(double val)
{
string v=val;
v+="=";
if (string_contains(v,".5=",1)>-1)
{
return true;
}
else
{
return false;
}
}
bool abletomove(){
string locate=get_zone_at(me.x,me.y);
if(weapon==23&&vulcanativa==1||locate=="Elevador."||dmoving||!moveable||paraquedas==1)return false;
else if (facing==Left){
if (string_contains(get_tile_at((me.x-1),me.y),"wall",1)>-1){
if(cloaked==false){
string walltype;
string tile=get_tile_at((me.x-1),me.y);
walltype=string_replace(tile,"wall","",true);
if (onwall==false){
p.play_stationary("wall"+walltype+".ogg",false);
send_reliable(peer_id,"draw wall"+walltype+".ogg",0);
onwall=true;
return false;
}
}
else{
p.play_stationary("spell_cloak_throughwall.ogg",false);
send_reliable(peer_id,"draw spell_cloak_throughwall.ogg",0);
return true;
}
}
else{
onwall=false;
return true;
}
}
else if (facing==Right){
if (string_contains(get_tile_at((me.x+1),me.y),"wall",1)>-1){
if(cloaked==false){
string walltype;
string tile=get_tile_at((me.x+1),me.y);
walltype=string_replace(tile,"wall","",true);
if (onwall==false){
p.play_stationary("wall"+walltype+".ogg",false);
send_reliable(peer_id,"draw wall"+walltype+".ogg",0);
onwall=true;
return false;
}
}
else{
p.play_stationary("spell_cloak_throughwall.ogg",false);
send_reliable(peer_id,"draw spell_cloak_throughwall.ogg",0);
return true;
}
}
else{
onwall=false;
return true;
}
}
else if (facing==Forward){
if (string_contains(get_tile_at(me.x,(me.y+1)),"wall",1)>-1){
string walltype;
string tile=get_tile_at(me.x,(me.y+1));
walltype=string_replace(tile,"wall","",true);
if (onwall==false){
p.play_stationary("wall"+walltype+".ogg",false);
send_reliable(peer_id,"draw wall"+walltype+".ogg",0);
onwall=true;
return false;
}
}
else{
onwall=false;
return true;
}
}
else if (facing==Back){
if (string_contains(get_tile_at(me.x,(me.y-1)),"wall",1)>-1){
string walltype;
string tile=get_tile_at(me.x,(me.y-1));
walltype=string_replace(tile,"wall","",true);
if (onwall==false){
p.play_stationary("wall"+walltype+".ogg",false);
send_reliable(peer_id,"draw wall"+walltype+".ogg",0);
onwall=true;
return false;
}
}
else{
onwall=false;
return true;
}
}
return onwall==true ? false : true;
}
void checkforplatforms()
{
if (gmt()!=""){
if(fallheight<20&&get_zone_at(me.x, me.y)!="Painel.")p.play_stationary(""+gmt()+"land.ogg",false);
else if(fallheight>=20&&get_zone_at(me.x, me.y)!="Painel.")p.play_stationary(""+gmt()+"hardland.ogg",false);
jumping=0;
falling=false;
fallvelocidade=deffallvelocidade;
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
if(get_zone_at(me.x, me.y)!="Painel.")send_reliable(peer_id,"land "+fallheight,0);
fallheight=0;
canijumptimer.restart();
}
}
void checkforwalls()
{
if (gmt()!="" and string_contains(gmt(),"wall",1)>-1)
{
p.play_stationary(gmt()+".ogg",false);
ascending=false;
jumptimer.restart();
atapex=true;
}
}
void fallloop()
{
if (falltimer.elapsed>=fallvelocidade)
{
falltimer.restart();
me.y-=1;
if (fallvelocidade>12)
fallvelocidade-=1;
fallheight+=1;
checkforplatforms();
}
}
void playcamera()
{
for (uint i=0; i<players.length(); i++)
{
if (players[i].x==camera.x and players[i].y==camera.y and players[i].map==mapname&&players[i].beeping==1)
{
p.play_extended_2d("beacon.ogg", me.x, me.y, camera.x, camera.y, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, 200.0);
}
}
for (uint i=0; i<objs.length(); i++)
{
if (objs[i].x==camera.x and objs[i].y==camera.y)
{
p.play_extended_2d("item.ogg", me.x, me.y, camera.x, camera.y, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, 200.0);
}
}
if (gct()=="")
{
p.play_2d("cameraair.ogg",me.x,me.y,camera.x,camera.y,false);
}
else if (gct()=="hazard")
{
p.play_2d("camerahazard.ogg",me.x,me.y,camera.x,camera.y,false);
}
else if (string_contains(gct(),"wall",1)>-1)
{
p.play_extended_2d(gct()+".ogg", me.x, me.y, camera.x, camera.y, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, 200.0);
}
else
{
p.play_extended_2d(gct()+"step"+random(1, 5)+".ogg", me.x, me.y, camera.x, camera.y, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, 200.0);
}
}
void playcameracustom(int x, int y)
{
string gt=get_tile_at(x,y);
if (gt=="")
{
p.play_2d("cameraair.ogg",me.x,me.y,x,y,false);
}
else if (gt=="hazard")
{
p.play_2d("camerahazard.ogg",me.x,me.y,x,y,false);
}
else if (gt=="wall")
{
p.play_2d("camerawall.ogg",me.x,me.y,x,y,false);
}
else
{
p.play_2d("cameratile.ogg",me.x,me.y,x,y,false);
}
}
void mainloop()
{
if(!emchat&&temponaoevoce.elapsed>=2000)tprincipais();
verificando();
if(connected)netloop();
if (term==true and termtimer.elapsed>=termtime)
{
term=false;
termtimer.restart();
reset();
menuprincipal();
}
if (exiting==true and exittimer.elapsed>=exittime)
{
exittimer.restart();
exiting=false;
reset();
menuprincipal();
}
if(nolhar!=""){
int n=get_player(nolhar);
if(n>-1){
olhar_x=players[n].x;
olhar_y=players[n].y;
}
else{
olhar_x=me.x;
olhar_y=me.y;
nolhar="";
send_reliable(peer_id, "volhar", 0);
}
}
else if(nolhar==""){
olhar_x=me.x;
olhar_y=me.y;
}
p.update_listener_2d(olhar_x, olhar_y);
p2.update_listener_2d(olhar_x, olhar_y);
pobjs.update_listener_2d(olhar_x, olhar_y);
pcomputador.update_listener_2d(olhar_x, olhar_y);
sourcepool.update_listener_2d(olhar_x, olhar_y);
checkloc();
sourcecheckloop();
if (playertrack!="" and get_player(playertrack)>-1)
{
if (players[get_player(playertrack)].map!=mapname)
{
speak(playertrack+" "+pu.get_value("não está em")+" "+pu.get_value(mapname)+". "+pu.get_value("Rastreamento desligado."));
playertrack="";
}
}
if(get_tile_at(me.x,me.y)==""&&!falling&&!dmoving&&jumping==0&&connected&&moveable&&!floating&&temponaoevoce.elapsed>=1000)falling=true;
if(falling&&connected)fallloop();
if (jumping==1)
{
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
if (me.y<=ty1)
{
me.y=ty1;
p.play_stationary(""+gmt()+"land.ogg",false);
send_reliable(peer_id,"move "+me.x+" "+me.y,0);
send_reliable(peer_id,"land",0);
jumping=0;
canijumptimer.restart();
}
if (jumping!=0)
checkforplatforms();
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
send_reliable(peer_id,"move2 "+me.x+" "+me.y,0);
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if(key_down(KEY_A)&&key_pressed(KEY_UP)&&wine()){
if (wsindex<2) speak(pu.get_value("Nenhuma voz."));
else if (wsv<wsindex) {
wsv++;
if (ws.set_current_voice(wsv))
speak(wslist[wsv]);
}
}
if(key_down(KEY_A)&&key_down(KEY_RIGHT)&&wine()==true){
if(ttsrate<10) {
ttsrate++;
ws.rate=ttsrate;
speak(pu.get_value("Velocidade SAP:")+" "+ttsrate);
writeprefs();
}
}
if (key_down(KEY_A)&&key_pressed(KEY_DOWN)&&wine()){
if (wsindex<2) speak(pu.get_value("Nenhuma voz."));
else if (wsv>0) {
wsv--;
if (ws.set_current_voice(wsv))
speak(wslist[wsv]);
}
}
if(key_down(KEY_A)&&key_down(KEY_LEFT)&&wine()==true){
if (ttsrate>-10) {
ttsrate-=1;
ws.rate=ttsrate;
speak(pu.get_value("Velocidade SAP:")+" "+ttsrate);
writeprefs();
}
}
if (key_pressed(KEY_RCONTROL))
{
stopspeech();
}
if (beaconing==1)
{
looping=false;
beaconloop();
}
if (gpi(playertrack)==-1 and looping==true)
{
speak("Loop off");
looping=false;
}
if (looping==true and looptimer.elapsed>=looptime)
{
looptimer.restart();
p.play_2d("beacon.ogg",me.x,me.y,players[gpi(playertrack)].x,players[gpi(playertrack)].y,false);
}
}
void invmenu(string category){
reset_all_forced_keys();
key_hold ileft(KEY_LEFT,500,50);
key_hold iright(KEY_RIGHT,500,50);
key_hold iup(KEY_UP,500,50);
key_hold idown(KEY_DOWN,500,50);
key_hold idell(KEY_DELETE,500,50);
get_characters();
string cl;
int counter=0;
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] peramitors2;
for(uint i=0; i<peramitors.length(); i++)
{
peramitors[i]=string_split(peramitors[i],"=",true)[0];
}
if(category=="Tudo")
{
speak(pu.get_value("Todos os itens"));
}
else if(category=="Status")
{
speak(pu.get_value("Status"));
}
else if(category=="Preferências")
{
speak(pu.get_value("Suas preferências"));
}
else if(category=="Corpos")
{
speak(pu.get_value("Coleção de corpos"));
}
else if(category=="Explosivos")
{
speak(pu.get_value("Compartimento de Explosivos"));
}
else if(category=="Status")
{
speak(pu.get_value("Status"));
}
else
{
speak(pu.get_value("Compartimento de "+category));
}
send_reliable(peer_id,"playsocial abrirziper.ogg",0);
while(true)
{
wait(5);
if(ausente||!moveable||mapname=="túnel"){
copiaragora="";
break;
}
mainloop();
peramitors.resize(0);
peramitors2.resize(0);
content=inv;
peramitors2=string_split(content, "\r\n", true);
if(peramitors2.length()==0)break;
for(uint i=0; i<peramitors2.length(); i++)
{
peramitors2[i]=string_split(peramitors2[i],"=",true)[0];
int pwn=0;
if (category=="Tudo")
{
peramitors.insert_last(peramitors2[i]);
}
else
{
if (category=="Armas"){
if(peramitors2[i]=="sugador"||peramitors2[i]=="dardo"||string_contains(peramitors2[i], "dardo_", 1)>-1)peramitors.insert_last(peramitors2[i]);
for (uint i2=0; i2<weapons.length(); i2++)
{
if (peramitors2[i]==weapons[i2])
{
peramitors.insert_last(peramitors2[i]);
}
}
}
if (category=="Munições")
{
if(peramitors2[i]=="flecha"||peramitors2[i]=="9mm"||peramitors2[i]=="12mm"||peramitors2[i]=="30mm"||peramitors2[i]=="5.56mm"||peramitors2[i]=="7.62mm"||peramitors2[i]=="laser"||peramitors2[i]=="míssil")
{
peramitors.insert_last(peramitors2[i]);
}
}
if (category=="Explosivos"){
if (peramitors2[i]=="mina"||string_contains(peramitors2[i],"bomba",1)!=-1||peramitors2[i]=="projétil"||string_contains(peramitors2[i], "controle", 1)>-1||peramitors2[i]=="fita_explosiva")
{
peramitors.insert_last(peramitors2[i]);
}
}
if (category=="Roupas")
{
if(string_contains(peramitors2[i],"boné",1)!=-1||string_contains(peramitors2[i],"calça",1)!=-1||string_contains(peramitors2[i],"chapéu",1)!=-1||string_contains(peramitors2[i],"bota",1)!=-1||string_contains(peramitors2[i],"capa",1)!=-1||string_contains(peramitors2[i],"coturno",1)!=-1||string_contains(peramitors2[i],"braçadeira",1)!=-1||string_contains(peramitors2[i],"luva",1)!=-1||string_contains(peramitors2[i],"anel",1)!=-1||string_contains(peramitors2[i],"brinco",1)!=-1||string_contains(peramitors2[i],"pulseira",1)!=-1||string_contains(peramitors2[i],"bracelete",1)!=-1||string_contains(peramitors2[i],"perneira",1)!=-1||string_contains(peramitors2[i],"cinto",1)!=-1||string_contains(peramitors2[i],"peitoral",1)!=-1||string_contains(peramitors2[i],"ombreira",1)!=-1||string_contains(peramitors2[i],"óculos",1)!=-1||string_contains(peramitors2[i],"máscara",1)!=-1||string_contains(peramitors2[i],"gorro",1)!=-1||string_contains(peramitors2[i],"touca",1)!=-1||string_contains(peramitors2[i],"vestido",1)!=-1||string_contains(peramitors2[i],"saia",1)!=-1||string_contains(peramitors2[i],"capacete",1)!=-1||string_contains(peramitors2[i],"tênis",1)!=-1||string_contains(peramitors2[i],"camiseta",1)!=-1||string_contains(peramitors2[i],"camisa",1)!=-1||string_contains(peramitors2[i],"colete",1)!=-1||string_contains(peramitors2[i],"jaqueta",1)!=-1||string_contains(peramitors2[i],"sapato",1)!=-1||string_contains(peramitors2[i],"blusa",1)!=-1)
{
peramitors.insert_last(peramitors2[i]);
}
}
if (category=="Comidas e bebidas"){
if(string_contains(peramitors2[i],"peixe_frito",1)!=-1||string_contains(peramitors2[i],"amora",1)!=-1||string_contains(peramitors2[i],"azeitona",1)!=-1||string_contains(peramitors2[i],"banana",1)!=-1||string_contains(peramitors2[i],"caju",1)!=-1||string_contains(peramitors2[i],"caqui",1)!=-1||string_contains(peramitors2[i],"coco",1)!=-1||string_contains(peramitors2[i],"figo",1)!=-1||string_contains(peramitors2[i],"goiaba",1)!=-1||string_contains(peramitors2[i],"jabuticaba",1)!=-1||string_contains(peramitors2[i],"maçã",1)!=-1||string_contains(peramitors2[i],"morango",1)!=-1||string_contains(peramitors2[i],"pera",1)!=-1||string_contains(peramitors2[i],"pêssego",1)!=-1||string_contains(peramitors2[i],"peixe_assado",1)!=-1||string_contains(peramitors2[i],"refrigerante",1)!=-1||string_contains(peramitors2[i],"cerveja",1)!=-1||string_contains(peramitors2[i],"energético",1)!=-1||string_contains(peramitors2[i],"suco",1)!=-1||string_contains(peramitors2[i],"pastel",1)!=-1||string_contains(peramitors2[i],"cochinha",1)!=-1||string_contains(peramitors2[i],"batata_frita",1)!=-1||string_contains(peramitors2[i],"enroladinho",1)!=-1||string_contains(peramitors2[i],"torresmo",1)!=-1||string_contains(peramitors2[i],"garrafa",1)!=-1||string_contains(peramitors2[i],"garrafinha",1)!=-1||string_contains(peramitors2[i],"cachorro_quente",1)!=-1){
peramitors.insert_last(peramitors2[i]);
}
}
if (category=="Documentos"){
if(string_contains(peramitors2[i],"passagem",1)!=-1||string_contains(peramitors2[i], "passaporte", 1)!=-1||string_contains(peramitors2[i], "jornal", 1)!=-1) peramitors.insert_last(peramitors2[i]);
}
if (category=="Corpos")
{
if (string_contains(peramitors2[i],"corpo_de",1)>-1)
{
peramitors.insert_last(peramitors2[i]);
}
}
if (category=="Preferências")
{
if(peramitors2[i]=="teleporter"||peramitors2[i]=="item_magnético"||string_contains(peramitors2[i], "pacote_", 1)>-1||peramitors2[i]=="paraquedas"||peramitors2[i]=="bicicleta"||peramitors2[i]=="mana"||peramitors2[i]=="escudo_do_tempo"||peramitors2[i]=="antibiótico"||peramitors2[i]=="foguete"||peramitors2[i]=="vara_de_pesca"||peramitors2[i]=="minhoca"||peramitors2[i]=="ovo_de_dragonsauro"||peramitors2[i]=="máquina_personagem"||peramitors2[i]=="teleportador")peramitors.insert_last(peramitors2[i]);
}
}
}
if(cavar.playing==false&&cavando==1)
{
cavando=0;
send_reliable(peer_id, "enterrar "+opa, 2);
}
if (ileft.pressing()&&cavando==0)
{
invcatpos-=1;
if (invcatpos<0)
invcatpos=invcat.length()-1;
invmenu(invcat[invcatpos]);
break;
}
if (iright.pressing()&&cavando==0)
{
invcatpos+=1;
if (invcatpos>=invcat.length())
invcatpos=0;
invmenu(invcat[invcatpos]);
break;
}
if(counter > peramitors.length())
{
counter=peramitors.length()-1;
}
if(cavando==0)cl=get_characters();
if(cl!="" and cl!=" " and cl.length()==1 and peramitors.length()>0)
{
int f=0;
int oc=counter;
for(uint i=counter; i<peramitors.length(); i++)
{
if(i==counter)
{
continue;
}
if(peramitors[i][0]==cl)
{
counter=i;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
if(string_contains(msg, "chave_da_lancha_de_", 1)>-1){
string msg2=string_replace(msg, "chave_da_lancha_de_", "", false);
msg=pu.get_value("chave_da_lancha_de_")+msg2;
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
cl="";
f=1;
break;
}
}
if(f==0)
{
counter=0;
for(uint i=counter; i<peramitors.length(); i++)
{
if(peramitors[i][0]==cl)
{
counter=i;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
cl="";
f=1;
break;
}
}
}
}
if(key_down(KEY_LCONTROL)&&key_pressed(KEY_RETURN)||key_down(KEY_RCONTROL)&&key_pressed(KEY_RETURN)&&peramitors.length()>0)descitem(peramitors[counter]);
if (key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and key_pressed(KEY_RETURN) and key_up(KEY_LCONTROL) and key_up(KEY_RCONTROL) and peramitors.length()>0)
{
give(peramitors[counter]);
}
else if (key_down(KEY_LSHIFT) and key_pressed(KEY_RETURN) and peramitors.length()>0 or key_down(KEY_RSHIFT) and key_pressed(KEY_RETURN) and peramitors.length()>0)
{
auction(peramitors[counter]);
}
else if(key_down(KEY_LMENU) and key_pressed(KEY_SPACE)&&peramitors.length()>0&&counter < peramitors.length())
{
retirar(peramitors[counter]);
}
else if(key_pressed(KEY_SPACE)&&peramitors.length()>0&&counter < peramitors.length())
{
interact(peramitors[counter]);
}
if (idell.pressing() and droptimer.elapsed>=droptime and peramitors.length()>0&&cavando==0)
{
droptimer.restart();
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
string stuff=v.input(pu.get_value("Quantos desse item você quer deletar?"));
if(stuff.length()>9)return;int s=string_to_number(stuff);
if (s>0)
drop(peramitors[counter],s);
}
else if (key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
int s=inv_item_number(peramitors[counter]);
drop(peramitors[counter],s);
}
else
drop(peramitors[counter]);
}
if(key_pressed(KEY_HOME) and peramitors.length()>0&&cavando==0)
{
counter=0;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
if(string_contains(msg, "chave_da_lancha_de_", 1)>-1){
string msg2=string_replace(msg, "chave_da_lancha_de_", "", false);
msg=pu.get_value("chave_da_lancha_de_")+msg2;
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
}
if(key_pressed(KEY_END) and peramitors.length()>0&&cavando==0)
{
counter=peramitors.length()-1;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
if(string_contains(msg, "chave_da_lancha_de_", 1)>-1){
string msg2=string_replace(msg, "chave_da_lancha_de_", "", false);
msg=pu.get_value("chave_da_lancha_de_")+msg2;
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
}
if(iup.pressing()&&cavando==0)
{
if(peramitors.length==1)
{
speak(peramitors[0]+", "+inv_item_number(peramitors[0]));
counter=0;
}
else if(counter > 0)
{
counter--;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
if(string_contains(msg, "chave_da_lancha_de_", 1)>-1){
string msg2=string_replace(msg, "chave_da_lancha_de_", "", false);
msg=pu.get_value("chave_da_lancha_de_")+msg2;
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
}
}
if(idown.pressing()&&cavando==0)
{
if(peramitors.length==1)
{
speak(peramitors[0]+", "+inv_item_number(peramitors[0]));
counter=0;
}
else if(counter < peramitors.length()-1)
{
counter++;
string msg=peramitors[counter];
if(string_contains(msg, "corpo_de_", 1)>-1){
string msg2=string_replace(msg, "corpo_de_", "", false);
msg=pu.get_value("corpo_de_")+pu.get_value(msg2);
}
if(string_contains(msg, "chave_da_lancha_de_", 1)>-1){
string msg2=string_replace(msg, "chave_da_lancha_de_", "", false);
msg=pu.get_value("chave_da_lancha_de_")+msg2;
}
speak(pu.get_value(msg)+", "+inv_item_number(peramitors[counter]));
copiaragora=pu.get_value(msg)+", "+inv_item_number(peramitors[counter]);
}
}
if(key_pressed(KEY_ESCAPE)&&cavando==0)
{
send_reliable(peer_id,"playsocial fecharziper.ogg",0);
copiaragora="";
return;
}
}
}
void inv_add_item(string itemname, int itemvalue)
{
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] values;
for(uint i=0; i<peramitors.length(); i++)
{
values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
}
if(inv_item_exists(itemname))
{
int orgval;
if(inv_item_number(itemname) > -1)
{
orgval=string_to_number(values[inv_item_number(itemname)]);
}
else
{
return;
}
if(orgval+itemvalue < 1)
{
inv_delete_item(itemname);
}
else
{
values[inv_item_number(itemname)]=(orgval+itemvalue);
string tempinv;
for(uint i=0; i<peramitors.length(); i++)
{
tempinv+=peramitors[i]+"="+values[i]+"\r\n";
}
inv=tempinv;
}
}
else
{
if(itemvalue > 0)
{
inv+=itemname+"="+itemvalue+"\r\n";
}
}
}
bool inv_item_exists(string itemname)
{
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] values;
for(uint i=0; i<peramitors.length(); i++)
{
values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
}
for(uint i=0; i<peramitors.length(); i++)
{
if(peramitors[i]==itemname)
{
return true;
}
}
return false;
}
int inv_item_number(string itemname)
{
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] values;
for(uint i=0; i<peramitors.length(); i++)
{
values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
}
for(uint i=0; i<peramitors.length(); i++)
{
if(peramitors[i]==itemname)
{
return string_to_number(values[i]);
}
}
return 0;
}
int inv_item(string itemname)
{
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] values;
for(uint i=0; i<peramitors.length(); i++)
{
values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
}
for(uint i=0; i<peramitors.length(); i++)
{
if(peramitors[i]==itemname)
{
return i;
}
}
return -1;
}
void inv_delete_item(string itemname)
{
string content=inv;
string[] peramitors=string_split(content, "\r\n", true);
string[] values;
for(uint i=0; i<peramitors.length(); i++)
{
values.insert_at(i,string_replace(peramitors[i], string_left(peramitors[i], string_contains(peramitors[i], "=", 1)+1), "", true));
peramitors[i]=string_replace(peramitors[i], "="+values[i], "", true);
}
for(uint i=0; i<peramitors.length(); i++)
{
if(peramitors[i]==itemname)
{
inv=string_replace(inv, itemname+"="+values[i]+"\r\n", "", false);
}
}
}
void give(string item)
{
string char=daritem();
if(char=="")
{
speak(pu.get_value("Ninguém perto de você."));
}
else
{
string amount=v.input(pu.get_value("Quantos você quer dar para")+" "+char+"?");
if (char!="" and amount!="")
{
send_reliable(peer_id,"give "+char+" "+item+" "+amount,0);
}
}
}
void checkitem()
{
for (uint i=0; i<objs.length(); i++)
{
if (objs[i].x==me.x and objs[i].y==me.y)
{
objs.remove_at(i);
send_reliable(peer_id,"enter2",0);
}
}
}
void drop(string item,int amount=1){
if(amount<0||amount>1000000000)return;
send_reliable(peer_id,"drop "+amount+" "+item,0);
}
void auction(string item)
{
int amount=string_to_number(v.input("Quantos?"));
string minbid2=v.input("Quantidade mínima para a oferta deste leilão?");
int minbid=string_to_number(minbid2);
if(amount>0&&amount<1000000000&&minbid>0&&minbid<1000000000){
send_reliable(peer_id,"/auction "+amount+" "+item+" "+minbid,1);
}
}
void positions()
{
}
int inter()
{
return interrupt;
}
void echocheck(int dir)
{
string ptyle=get_tile_at(me.x, me.y);
if(ptyle==""&&jumping==0&&pulou==0&&mapname!="túnel"&&!dcheck&&!echeck&&moveable==true)
{
echotimer.restart();
pulou=1;
echo=false;
send_reliable(peer_id, "draw caiu.ogg", 0);
p.play_stationary("caiu.ogg", false);
return;
}
}
void weaponcheckloop()
{
if(weapon==31){
weapontime=mp7time;
carregartime=carregar30;
}
if(weapon==32){
weapontime=m16time;
carregartime=carregar32;
}
if(weapon==34){
weapontime=molotovtime;
}
if(weapon==35){
weapontime=extintortime;
}
if(weapon==36){
weapontime=galiltime;
carregartime=carregar34;
}
if(weapon==37){
weapontime=tdardo;
carregartime=carregar30;
}
if(weapon==38){
carregartime=carregar23;
if(modoak48==0)weapontime=ak48t;
else weapontime=ak48t2;
}
if(weapon==39){
carregartime=carregar10;
weapontime=mk1t;
}
if (weapon==0)
{
weapontime=socotime;
carregartime=carregar1;
}
if (weapon==1)
{
weapontime=socotime;
carregartime=carregar1;
}
if (weapon==2)
{
weapontime=knifetime;
}
if (weapon==3)
{
weapontime=shotguntime;
carregartime=carregar2;
}
if (weapon==4)
{
weapontime=glocktime;
carregartime=carregar4;
}
if (weapon==5)
{
weapontime=eagletime;
carregartime=carregar5;
}
if (weapon==6)
{
weapontime=crossbowtime;
carregartime=carregar6;
}
if (weapon==7)
{
weapontime=firestartime;
carregartime=carregar7;
}
if (weapon==8)
{
weapontime=miniguntime;
carregartime=carregar8;
}
if (weapon==9)
{
weapontime=rocketlaunchertime;
}
if (weapon==10)
{
weapontime=rpgtime;
carregartime=carregar10;
}
if (weapon==11)
{
weapontime=modobenellitime;
carregartime=carregar11;
}
if (weapon==12)
{
weapontime=lasertime;
carregartime=carregar12;
}
if (weapon==13)
{
weapontime=missiltime;
carregartime=carregar13;
}
if (weapon==14)
{
weapontime=grenadetime;
carregartime=carregar14;
}
if (weapon==15)
{
weapontime=snipertime;
carregartime=carregar15;
}
if (weapon==16)
{
weapontime=uzitime;
carregartime=carregar16;
}
if (weapon==17)
{
weapontime=mp5time;
carregartime=carregar17;
}
if (weapon==18)
{
if(rar15==0){
weapontime=ar15time;
}
else if(rar15==1){
weapontime=ar15time2;
}
carregartime=carregar18;
}
if (weapon==19)
{
weapontime=m60time;
carregartime=carregar19;
}
if (weapon==20)
{
weapontime=espadatime;
carregartime=carregar20;
}
if (weapon==21)
{
weapontime=remingtontime;
carregartime=carregar21;
}
if (weapon==22)
{
weapontime=dozetime;
carregartime=carregar22;
}
if (weapon==23)
{
weapontime=vulcantime;
carregartime=carregar23;
}
if (weapon==24)
{
weapontime=m4a1time;
carregartime=carregar24;
}
if (weapon==25)
{
weapontime=m249time;
carregartime=carregar25;
}
if (weapon==26)
{
if(rak47==0){
weapontime=ak47time;
}
else{
weapontime=ak47time2;
}
carregartime=carregar26;
}
if (weapon==27)
{
weapontime=tasertime;
}
if (weapon==28)
{
weapontime=socotime+100;
}
if (weapon==29){
weapontime=lancatime;
}
if (weapon==30){
weapontime=espada_curtatime;
}
if (weapon==33)
{
weapontime=sub_lasertime;
carregartime=carregar33;
}
}
void carregar()
{
if(weapon==31 and carregartimer.elapsed>=carregartime){
if(inv_item_number("9mm")>=100 and mp7_carregada<=0){
carregando=1;
//p.play_stationary("carregar_mp7.ogg", false);
send_reliable(peer_id, "carregar carregar_mp7.ogg",0);
mp7_carregada=100;
}
else{
}
}
if(weapon==32 and carregartimer.elapsed>=carregartime){
if(inv_item_number("5.56mm")>=30 and m16_carregada<=0){
carregando=1;
//p.play_stationary("carregar_m16.ogg", false);
send_reliable(peer_id, "carregar carregar_m16.ogg",0);
m16_carregada=30;
}
else{
}
}
if(weapon==3 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("12mm")>=2 and shotgun_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_shotgun.ogg", false);
send_reliable(peer_id,"carregar carregar_shotgun.ogg",0);
shotgun_carregada=2;
}
else
{
}
}
if(weapon==4 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("9mm")>=15 and glock_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_glock.ogg", false);
send_reliable(peer_id,"carregar carregar_glock.ogg",0);
glock_carregada=15;
}
else
{
}
}
if(weapon==5 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("9mm")>=15 and desert_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_desert.ogg", false);
send_reliable(peer_id,"carregar carregar_desert.ogg",0);
desert_carregada=15;
}
else
{
}
}
if(weapon==6 and carregartimer.elapsed>=carregartime)
{
if(modoarco==0){
if(inv_item_number("flecha")>=1&&arco_carregado<=0){
carregando=1;
send_reliable(peer_id,"carregar carregar_arco.ogg",0);
arco_carregado=1;
arco_carregado2=0;
}
}
else if(modoarco==1){
if(inv_item_number("flecha_envenenada")>=1&&arco_carregado2<=0)
{
carregando=1;
send_reliable(peer_id,"carregar carregar_arco.ogg",0);
arco_carregado=0;
arco_carregado2=1;
}
}
else
{
}
}
if(weapon==7 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("5.56mm")>=30 and m14_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_m14.ogg", false);
send_reliable(peer_id,"carregar carregar_m14.ogg",0);
m14_carregada=30;
}
else
{
}
}
if(weapon==8 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("7.62mm")>=100 and m240_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_m240.ogg", false);
send_reliable(peer_id,"carregar carregar_m240.ogg",0);
m240_carregada=100;
}
else
{
}
}
if(weapon==10 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("5.56mm")>=30 and rifle_carregado<=0)
{
carregando=1;
//p.play_stationary("carregar_rifle.ogg", false);
send_reliable(peer_id,"carregar carregar_rifle.ogg",0);
rifle_carregado=30;
}
else
{
}
}
if(weapon==11 and carregartimer.elapsed>=carregartime and modoatirartempo.elapsed>modoatirar)
{
if(inv_item_number("12mm")>=4 and benelli_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_benelli.ogg", false);
send_reliable(peer_id,"carregar carregar_benelli.ogg",0);
benelli_carregada=4;
}
else
{
}
}
if(weapon==12 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("laser")>=8 and ultralaser_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_ultralaser.ogg", false);
send_reliable(peer_id,"carregar carregar_ultralaser.ogg",0);
ultralaser_carregada=8;
}
else
{
}
}
if(weapon==13 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("míssil")>=1 and bazuca_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_bazuca.ogg", false);
send_reliable(peer_id,"carregar carregar_bazuca.ogg",0);
bazuca_carregada=1;
}
else
{
}
}
if(weapon==14 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("granada")>=1 and granada_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_grenade.ogg", false);
send_reliable(peer_id,"carregar carregar_grenade.ogg",0);
granada_carregada=1;
}
else
{
}
}
if(weapon==15 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("7.62mm")>=1 and sniper_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_sniper.ogg", false);
send_reliable(peer_id,"carregar carregar_sniper.ogg",0);
sniper_carregada=1;
}
else
{
}
}
if(weapon==16 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("9mm")>=40 and uzi_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_uzi.ogg", false);
send_reliable(peer_id,"carregar carregar_uzi.ogg",0);
uzi_carregada=40;
}
else
{
}
}
if(weapon==17 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("9mm")>=30 and mp5_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_mp5.ogg", false);
send_reliable(peer_id,"carregar carregar_mp5.ogg",0);
mp5_carregada=30;
}
else
{
}
}
if(weapon==18 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("5.56mm")>=30 and ar15_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_ar15.ogg", false);
send_reliable(peer_id,"carregar carregar_ar15.ogg",0);
ar15_carregada=30;
}
else
{
}
}
if(weapon==19 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("7.62mm")>=100 and m60_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_m60.ogg", false);
send_reliable(peer_id,"carregar carregar_m60.ogg",0);
m60_carregada=100;
}
else
{
}
}
if(weapon==21 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("30mm")>=6 and remington_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_remington.ogg", false);
send_reliable(peer_id,"carregar carregar_remington.ogg",0);
remington_carregada=6;
}
else
{
}
}
if(weapon==22 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("12mm")>=2 and doze_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_doze.ogg", false);
send_reliable(peer_id,"carregar carregar_doze.ogg",0);
doze_carregada=2;
}
else
{
}
}
if(weapon==23 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("7.62mm")>=1000 and vulcan_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_vulcan.ogg", false);
send_reliable(peer_id,"carregar carregar_vulcan.ogg",0);
vulcan_carregada=1000;
}
else
{
}
}
if(weapon==24 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("5.56mm")>=30 and m4a1_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_m4a1.ogg", false);
send_reliable(peer_id,"carregar carregar_m4a1.ogg",0);
m4a1_carregada=30;
}
else
{
}
}
if(weapon==25 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("5.56mm")>=200 and m249_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_m249.ogg", false);
send_reliable(peer_id,"carregar carregar_m249.ogg",0);
m249_carregada=200;
}
else
{
}
}
if(weapon==26 and carregartimer.elapsed>=carregartime)
{
if(inv_item_number("7.62mm")>=40 and ak47_carregada<=0)
{
carregando=1;
//p.play_stationary("carregar_ak47.ogg", false);
send_reliable(peer_id,"carregar carregar_ak47.ogg",0);
ak47_carregada=40;
}
else
{
}
}
if(weapon==36&&carregartimer.elapsed>=carregartime){
if(inv_item_number("7.62mm")>=30&&galil_carregada<=0){
carregando=1;
send_reliable(peer_id,"carregar carregar_galil.ogg",0);
galil_carregada=30;
}
else
{
}
}
if(weapon==38&&carregartimer.elapsed>=carregartime){
if(inv_item_number("7.62mm")>=40&&ak48_carregada<=0){
carregando=1;
send_reliable(peer_id,"carregar carregar_ak48.ogg",0);
if(inv_item_number("pente_customizado")<=0)ak48_carregada=40;
else if(inv_item_number("7.62mm")>=100&&inv_item_number("pente_customizado")>0)ak48_carregada=100;
}
else
{
}
}
if(weapon==39&&carregartimer.elapsed>=carregartime){
if(inv_item_number("7.62mm")>=30&&mk1_carregada<=0){
carregando=1;
send_reliable(peer_id,"carregar carregar_mk1.ogg",0);
mk1_carregada=30;
}
else
{
}
}
if(weapon==37&&carregartimer.elapsed>=carregartime){
if(inv_item_number("dardo")>0&&dardo_carregado<=0&&mdardo==0&&dardo_carregado2==0){
carregando=1;
send_reliable(peer_id,"carregar carregando_dardo.ogg",0);
dardo_carregado=1;
}
if(inv_item_number("dardo_envenenado")>0&&dardo_carregado2<=0&&mdardo==1&&dardo_carregado==0){
carregando=1;
send_reliable(peer_id,"carregar carregando_dardo.ogg",0);
dardo_carregado2=1;
}
else
{
}
}
if(weapon==33 and carregartimer.elapsed>=carregartime){
if(inv_item_number("laser")>=30&&sub_laser_carregada<=0){
carregando=1;
send_reliable(peer_id, "carregar carregar_sublaser.ogg",0);
sub_laser_carregada=30;
}
else{
}
}
}
void reiniciar(){
writeprefs();
if(SCRIPT_COMPILED==true){
run(SCRIPT_EXECUTABLE, "reiniciar "+COMMAND_LINE, false, false);
}
else{
run(SCRIPT_EXECUTABLE, SCRIPT_CURRENT_FILE, false, false);
}
exit();
}
string ndicionario(string message){
//message=string_to_lower_case(message);
string[] filter;
file f;
f.open("palavras.txt", "r");
filter=string_split(f.read(), "\r\n", false);
for(int counter=0; counter<filter.length(); counter++){
string banned=filter[counter];
if(string_contains(string_to_lower_case(message), filter[counter], 1)>-1)
{
string a;
for( uint ii=0;ii<filter[counter].length();ii++){a+="sounds.dat";}
message=string_replace(message, filter[counter], a, true);
return message;
}
}
return message;
}
